/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.receipt;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.service.ServiceException;
import com.krawler.hql.accounting.ReceiptDetail;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.BillingReceipt;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.hql.accounting.PayDetail;
import com.krawler.hql.accounting.Receipt;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accReceiptImpl implements accReceiptDAO {
    private HibernateTemplate hibernateTemplate;
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.hibernateTemplate = new HibernateTemplate(sessionFactory);
	}

    public KwlReturnObject saveReceipt(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            Receipt receipt = null;
            String receiptid = (String) hm.get("receiptid");

            if (StringUtil.isNullOrEmpty(receiptid)) {
                receipt = new Receipt();
                receipt.setDeleted(false);
            } else {
                receipt = (Receipt) hibernateTemplate.get(Receipt.class, receiptid);
            }

            if (hm.containsKey("entrynumber")) {
                receipt.setReceiptNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("autogenerated")) {
                receipt.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                receipt.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("externalCurrencyRate")) {
                receipt.setExternalCurrencyRate((Double) hm.get("externalCurrencyRate"));
            }
            if (hm.containsKey("paydetailsid")) {
                PayDetail pd = hm.get("paydetailsid")==null?null:(PayDetail) hibernateTemplate.get(PayDetail.class, (String) hm.get("paydetailsid"));
                receipt.setPayDetail(pd);
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                receipt.setCompany(company);
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                receipt.setCurrency(currency);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                receipt.setJournalEntry(je);
            }
            if (hm.containsKey("receiptdetails")) {
                receipt.setRows((Set<ReceiptDetail>) hm.get("receiptdetails"));
            }
            hibernateTemplate.saveOrUpdate(receipt);
            list.add(receipt);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accReceiptImpl.saveReceipt : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Receipt has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getReceipts(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            boolean deleted =Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted =Boolean.parseBoolean((String) request.get("nondeleted"));

            String ss = (String) request.get("ss");
            String companyid = (String) request.get("companyid");
            ArrayList params=new ArrayList();
            params.add(companyid);
            String condition=" where r.company.companyID=?  and jed.debit=false ";
            if(StringUtil.isNullOrEmpty(ss)==false){
               params.add(ss+"%");
               condition+= " and (ac.name like ? ) ";
           }
           if (nondeleted)
                condition += " and r.deleted=false ";
            else if (deleted)
                condition += " and r.deleted=true ";

           String query="select r, ac from Receipt r inner join r.journalEntry je inner join je.details jed inner join jed.account ac"+condition;
           list = HibernateUtil.executeQuery(hibernateTemplate, query,params.toArray());
           count = list.size();
           if(StringUtil.isNullOrEmpty(start)==false&&StringUtil.isNullOrEmpty(limit)==false){
                list=HibernateUtil.executeQueryPaging(hibernateTemplate, query,params.toArray(), new Integer[]{Integer.parseInt(start),Integer.parseInt(limit)});
           }
        } catch (Exception ex) {
            Logger.getLogger(accReceiptImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject saveBillingReceipt(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            BillingReceipt receipt = new BillingReceipt();
            String receiptid = (String) hm.get("billingreceiptid");

            if (StringUtil.isNullOrEmpty(receiptid)) {
                receipt = new BillingReceipt();
                receipt.setDeleted(false);
            } else {
                receipt = (BillingReceipt) hibernateTemplate.get(BillingReceipt.class, receiptid);
            }

            if (hm.containsKey("entrynumber")) {
                receipt.setBillingReceiptNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("autogenerated")) {
                receipt.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                receipt.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("externalCurrencyRate")) {
                receipt.setExternalCurrencyRate((Double) hm.get("externalCurrencyRate"));
            }
            if (hm.containsKey("paydetailsid")) {
                PayDetail pd = hm.get("paydetailsid")==null?null:(PayDetail) hibernateTemplate.get(PayDetail.class, (String) hm.get("paydetailsid"));
                receipt.setPayDetail(pd);
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                receipt.setCompany(company);
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                receipt.setCurrency(currency);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                receipt.setJournalEntry(je);
            }
            if (hm.containsKey("receiptdetails")) {
                receipt.setRows((Set<ReceiptDetail>) hm.get("receiptdetails"));
            }
            hibernateTemplate.saveOrUpdate(receipt);
            list.add(receipt);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accReceiptImpl.saveBillingReceipt : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Billing Receipt has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getBillingReceipts(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            String ss = (String) request.get("ss");
            String companyid = (String) request.get("companyid");
            boolean deleted =Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted =Boolean.parseBoolean((String) request.get("nondeleted"));

            ArrayList params=new ArrayList();
            params.add(companyid);

            String condition=" where r.company.companyID=?  and jed.debit=false ";
            if(StringUtil.isNullOrEmpty(ss)==false){
               params.add(ss+"%");
               condition+= " and (ac.name like ? ) ";
            }
            if (nondeleted)
                condition += " and r.deleted=false ";
            else if (deleted)
                condition += " and r.deleted=true ";

            String query="select r, ac from BillingReceipt r inner join r.journalEntry je inner join je.details jed inner join jed.account ac"+condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accReceiptImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getReceiptFromInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from ReceiptDetail rd  where rd.invoice.ID=? and rd.receipt.deleted=false and rd.company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBReceiptFromBInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from BillingReceiptDetail rd  where rd.billingInvoice.ID=? and rd.billingReceipt.deleted=false and rd.company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deleteReceiptDetails(String receiptid, String companyid) throws ServiceException {
        String delQuery = "delete from ReceiptDetail brd where brd.receipt.ID=? and brd.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Receipt details has been deleted successfully", null, null, numRows);
    }

    public KwlReturnObject deleteReceipt(String receiptid, String companyid) throws ServiceException {
        String delQuery = "delete from Receipt br where ID=? and br.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Receipt details has been deleted successfully", null, null, numRows);
    }

    public KwlReturnObject deleteReceiptEntry(String receiptid, String companyid) throws ServiceException {
        String query = "update Receipt set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Receipt has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getJEFromReceipt(String receiptid) throws ServiceException {
        List list = new ArrayList();
        String query = "select r.journalEntry.ID from Receipt r where r.ID=? and r.company.companyID=r.journalEntry.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getReceiptDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ReceiptDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingReceiptDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingReceiptDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject deleteBillingReceiptDetails(String receiptid, String companyid) throws ServiceException {
        String delQuery = "delete from BillingReceiptDetail brd where brd.billingReceipt.ID=? and brd.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Billing receipt details has been deleted successfully", null, null, numRows);
    }

    public KwlReturnObject deleteBillingReceipt(String receiptid, String companyid) throws ServiceException {
        String delQuery = "delete from BillingReceipt br where ID=? and br.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Billing receipt details has been deleted successfully", null, null, numRows);
    }

    public KwlReturnObject deleteBillingReceiptEntry(String receiptid, String companyid) throws ServiceException {
        //query = "update BillingReceipt set deleted=true where ID in("+qMarks +") and company.companyID=?";
        String delQuery = "update BillingReceipt set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Billing receipt details has been deleted successfully", null, null, numRows);
    }

    public KwlReturnObject getReceiptFromBillNo(String billno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from Receipt where receiptNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{billno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingReceiptFromBillNo(String billno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from BillingReceipt where billingReceiptNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{billno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getReceiptAmountFromInvoice(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String q = "select sum(amount) from ReceiptDetail rd where rd.invoice.ID=? group by rd.invoice";
        List l = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{invoiceid});
        double amount = (l.isEmpty() ? 0 : (Double) l.get(0));
        list.add(amount);
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingReceiptAmountFromInvoice(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String q = "select sum(amount) from BillingReceiptDetail rd where rd.billingReceipt.deleted=false and rd.billingInvoice.ID=? group by rd.billingInvoice";
        List l = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{invoiceid});
        double amount = (l.isEmpty() ? 0 : (Double) l.get(0));
        list.add(amount);
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getReciptFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from Receipt where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBReciptFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from BillingReceipt where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getJEFromBR(String receiptid, String companyid) throws ServiceException {
        String selQuery = "select p.journalEntry.ID from BillingReceipt p where p.ID = ? and p.company.companyID = ?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingReceiptDetail(String receiptid, String companyid) throws ServiceException {
        //"from BillingReceiptDetail rd  where rd.billingInvoice.ID in ( "+qMarks +")  and rd.billingReceipt.deleted=false and rd.company.companyID=?";
        String selQuery = "from BillingReceiptDetail rd  where rd.billingInvoice.ID = ? and rd.billingReceipt.deleted=false and rd.company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
}
