/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.vendorpayment;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.BillingPayment;
import com.krawler.hql.accounting.BillingPaymentDetail;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.hql.accounting.PayDetail;
import com.krawler.hql.accounting.Payment;
import com.krawler.hql.accounting.PaymentDetail;
import com.krawler.spring.common.KwlReturnObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accVendorPaymentImpl implements accVendorPaymentDAO{
    private HibernateTemplate hibernateTemplate;
    public void setSessionFactory(SessionFactory sessionFactory){
        this.hibernateTemplate = new HibernateTemplate(sessionFactory);
    }

    public KwlReturnObject savePayment(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            Payment payment = null;
            String paymentid = (String) hm.get("paymentid");
            
            if (StringUtil.isNullOrEmpty(paymentid)) {
                payment = new Payment();
                payment.setDeleted(false);
            } else {
                payment = (Payment) hibernateTemplate.get(Payment.class, paymentid);
            }

            if (hm.containsKey("entrynumber")) {
                payment.setPaymentNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("autogenerated")) {
                payment.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                payment.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("paydetailsid")) {
                PayDetail pd = hm.get("paydetailsid")==null?null:(PayDetail) hibernateTemplate.get(PayDetail.class, (String) hm.get("paydetailsid"));
                payment.setPayDetail(pd);
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                payment.setCompany(company);
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                payment.setCurrency(currency);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                payment.setJournalEntry(je);
            }
            if (hm.containsKey("pdetails")) {
                payment.setRows((Set<PaymentDetail>) hm.get("pdetails"));
            }
            if (hm.containsKey("externalCurrencyRate")) {
                payment.setExternalCurrencyRate((Double) hm.get("externalCurrencyRate"));
            }
            hibernateTemplate.saveOrUpdate(payment);
            list.add(payment);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentImpl.savePayment : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Payment has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject saveBillingPayment(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            BillingPayment bPayment = null;
            String billingPaymentid = (String) hm.get("billingPaymentid");
            if (StringUtil.isNullOrEmpty(billingPaymentid)) {
                bPayment = new BillingPayment();
            } else {
                bPayment = (BillingPayment) hibernateTemplate.get(BillingPayment.class, billingPaymentid);
            }

//            if(payment != null) {
            if (hm.containsKey("entrynumber")) {
                bPayment.setBillingPaymentNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("autogenerated")) {
                bPayment.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                bPayment.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("paydetailsid")) {
                PayDetail pd = hm.get("paydetailsid") == null ? null : (PayDetail) hibernateTemplate.get(PayDetail.class, (String) hm.get("paydetailsid"));
                bPayment.setPayDetail(pd);
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid") == null ? null : (Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                bPayment.setCompany(company);
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid") == null ? null : (KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String) hm.get("currencyid"));
                bPayment.setCurrency(currency);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid") == null ? null : (JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                bPayment.setJournalEntry(je);
            }
            if (hm.containsKey("bpdetails")) {
                bPayment.setRows((Set<BillingPaymentDetail>) hm.get("bpdetails"));
            }
            if (hm.containsKey("deleted")) {
                bPayment.setDeleted((Boolean) hm.get("deleted"));
            }
            if (hm.containsKey("externalCurrencyRate")) {
                bPayment.setExternalCurrencyRate((Double) hm.get("externalCurrencyRate"));
            }
            hibernateTemplate.saveOrUpdate(bPayment);
//            }
            list.add(bPayment);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentImpl.saveBillingPayment : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Payment has been updated successfully", null, list, list.size());
    }
    public KwlReturnObject getPaymentVendorNames(String companyid,String paymentid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            params.add(companyid);
            params.add(paymentid);
            String condition = " where p.company.companyID=? and jed.debit=true and p.ID=? ";
            String query = "select  ac.name from Payment p inner join p.journalEntry je inner join je.details jed inner join jed.account ac" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentImpl.getPaymentVendorNames : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getBillingPaymentVendorNames(String companyid,String paymentid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            params.add(companyid);
            params.add(paymentid);
            String condition = " where p.company.companyID=? and jed.debit=true and p.ID=? ";
            String query = "select  ac.name from BillingPayment p inner join p.journalEntry je inner join je.details jed inner join jed.account ac" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentImpl.getBillingPaymentVendorNames : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getPayments(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency currency = (KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String) request.get("currencyid"));
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            String ss = (String) request.get("ss");
            boolean deleted =Boolean.parseBoolean((String)request.get("deleted"));
            boolean nondeleted =Boolean.parseBoolean((String)request.get("nondeleted"));

            ArrayList params = new ArrayList();
            params.add((String) request.get("companyid"));
            String condition = " where p.company.companyID=? and jed.debit=true ";
            if (StringUtil.isNullOrEmpty(ss) == false) {
                params.add(ss + "%");
                condition += " and (ac.name like ?) ";
            }
            if (nondeleted)
                condition += " and p.deleted=false ";
            else if (deleted)
                condition += " and p.deleted=true ";

            String query = "select p, ac from Payment p inner join p.journalEntry je inner join je.details jed inner join jed.account ac" + condition + " group by p";
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentImpl.getPayments : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getBillingPayments(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency currency = (KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String) request.get("currencyid"));
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            boolean deleted =Boolean.parseBoolean((String)request.get("deleted"));
            boolean nondeleted =Boolean.parseBoolean((String)request.get("nondeleted"));

            String ss = (String) request.get("ss");
            ArrayList params = new ArrayList();
            params.add((String) request.get("companyid"));
            String condition=" where r.company.companyID=?  and jed.debit=true ";
            if (StringUtil.isNullOrEmpty(ss) == false) {
                params.add(ss + "%");
                condition += " and (ac.name like ?) ";
            }
            if (nondeleted)
                condition += " and r.deleted=false ";
            else if (deleted)
                condition += " and r.deleted=true ";
            String query="select r, ac from BillingPayment r inner join r.journalEntry je inner join je.details jed inner join jed.account ac"+condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accVendorPaymentImpl.getBillingPayments : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject deletePayments(String paymentid, String companyid) throws ServiceException {
        //Delete Payment
        String delQuery = "delete from Payment p where ID=? and p.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{paymentid, companyid});
        return new KwlReturnObject(true, "Payment has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deletePaymentEntry(String paymentid, String companyid) throws ServiceException {
        String query = "update Payment set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{paymentid, companyid});
        return new KwlReturnObject(true, "Credit Note has been deleted successfully.", null, null, numRows);
    }
//query = "update BillingPayment set deleted=true where ID in("+qMarks +") and company.companyID=?";
    public KwlReturnObject deleteBillingPaymentEntry(String paymentid, String companyid) throws ServiceException {
        String query = "update BillingPayment set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{paymentid, companyid});
        return new KwlReturnObject(true, "Credit Note has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deletePaymentsDetails(String paymentid, String companyid) throws ServiceException {
        //Delete Payment Details
        String delQuery = "delete from PaymentDetail pd where pd.payment.ID=? and pd.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{paymentid, companyid});
        return new KwlReturnObject(true, "Payment Details has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteBillingPaymentsDetails(String paymentid, String companyid) throws ServiceException {
        //Delete Billing Payment Details
        String delQuery = "delete from BillingPaymentDetail pd where pd.billingPayment.ID=? and pd.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{paymentid, companyid});
        return new KwlReturnObject(true, "Payment Details has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getPaymentDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PaymentDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingPaymentDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingPaymentDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getJEFromPayment(String paymentid) throws ServiceException {
        List list = new ArrayList();
        String query = "select p.journalEntry.ID from Payment p where p.ID=? and p.company.companyID=p.journalEntry.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{paymentid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
//select p.journalEntry.ID from BillingPayment p where p.ID in("+qMarks +") and p.company.companyID=je.company.companyID
    public KwlReturnObject getJEFromBillingPayment(String paymentid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from BillingPayment p where p.ID = ? and p.company.companyID = ?";
//        String query = "select p.journalEntry.ID from Payment p where p.ID=? and p.company.companyID=p.journalEntry.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{paymentid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
/*
    public KwlReturnObject getPDFromGReceipt(String receiptid) throws ServiceException {
        List list = new ArrayList();
        String query = "select pd from PaymentDetail pd where pd.payment.deleted=false and pd.goodsReceipt.ID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
*/
    public KwlReturnObject getPaymentsFromGReceipt(String receiptid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from PaymentDetail pd  where pd.goodsReceipt.ID=? and pd.payment.deleted=false and pd.company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getPaymentFromNo(String pno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from Payment where paymentNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{pno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingPaymentFromNo(String pno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from BillingPayment where billingPaymentNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{pno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getPaymentFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from Payment where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingPaymentsFromGReceipt(String receiptid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from BillingPaymentDetail pd  where pd.billingGoodsReceipt.ID = ?  and pd.billingPayment.deleted=false and pd.company.companyID=?";
//        String query = "from PaymentDetail pd  where pd.goodsReceipt.ID=? and pd.payment.deleted=false and pd.company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
}
