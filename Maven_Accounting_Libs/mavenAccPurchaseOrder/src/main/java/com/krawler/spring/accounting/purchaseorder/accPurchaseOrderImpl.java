/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.purchaseorder;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.CostCenter;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.Account;
import com.krawler.hql.accounting.BillingPurchaseOrder;
import com.krawler.hql.accounting.BillingPurchaseOrderDetail;
import com.krawler.hql.accounting.Product;
import com.krawler.hql.accounting.PurchaseOrder;
import com.krawler.hql.accounting.PurchaseOrderDetail;
import com.krawler.hql.accounting.Tax;
import com.krawler.hql.accounting.Vendor;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONObject;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accPurchaseOrderImpl implements accPurchaseOrderDAO{
    private HibernateTemplate hibernateTemplate;
    public void setSessionFactory(SessionFactory sessionFactory){
        this.hibernateTemplate = new HibernateTemplate(sessionFactory);
    }

    public KwlReturnObject addPurchaseOrder(HashMap hm) throws ServiceException {
        List list = new ArrayList();
        try{
            PurchaseOrder po = new PurchaseOrder();
            po.setDeleted(false);
            if(hm.containsKey("entrynumber")){
                po.setPurchaseOrderNumber((String) hm.get("entrynumber"));
            }
            if(hm.containsKey("autogenerated")){
                po.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if(hm.containsKey("memo")){
                po.setMemo((String) hm.get("memo"));
            }
            if(hm.containsKey("vendorid")){
                Vendor vendor = (hm.get("vendorid")==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String) hm.get("vendorid")));
                po.setVendor(vendor);
            }
            if(hm.containsKey("billdate")){
                po.setOrderDate((Date) hm.get("billdate"));
            }
            if(hm.containsKey("duedate")){
                po.setDueDate((Date) hm.get("duedate"));
            }
            if(hm.containsKey("companyid")){
                Company cmp = (hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid")));
                po.setCompany(cmp);
            }
            if(hm.containsKey("podetails")){
                po.setRows((Set<PurchaseOrderDetail>) hm.get("podetails"));
            }
            hibernateTemplate.saveOrUpdate(po);
            list.add(po);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.addPurchaseOrder : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been added successfully", null, list, list.size());
    }

    public KwlReturnObject updatePurchaseOrder(HashMap hm) throws ServiceException {
        List list = new ArrayList();
        try{
            String poid = (String) hm.get("poid");
            PurchaseOrder po = (PurchaseOrder) hibernateTemplate.get(PurchaseOrder.class, poid);
            if(po != null) {
                if(hm.containsKey("entrynumber")){
                    po.setPurchaseOrderNumber((String) hm.get("entrynumber"));
                }
                if(hm.containsKey("autogenerated")){
                    po.setAutoGenerated((Boolean) hm.get("autogenerated"));
                }
                if(hm.containsKey("memo")){
                    po.setMemo((String) hm.get("memo"));
                }
                if(hm.containsKey("vendorid")){
                    Vendor vendor = (hm.get("vendorid")==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String) hm.get("vendorid")));
                    po.setVendor(vendor);
                }
                if(hm.containsKey("billdate")){
                    po.setOrderDate((Date) hm.get("billdate"));
                }
                if(hm.containsKey("duedate")){
                    po.setDueDate((Date) hm.get("duedate"));
                }
                if(hm.containsKey("companyid")){
                    Company cmp = (hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid")));
                    po.setCompany(cmp);
                }
                if(hm.containsKey("podetails")){
                    po.setRows((Set<PurchaseOrderDetail>) hm.get("podetails"));
                }
                hibernateTemplate.saveOrUpdate(po);
            }
            list.add(po);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePurchaseOrder : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject savePurchaseOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try{
            String poid = (String) dataMap.get("id");
            PurchaseOrder po = new PurchaseOrder();
            if(StringUtil.isNullOrEmpty(poid)) {
                po.setDeleted(false);
            } else {
                po = (PurchaseOrder) hibernateTemplate.get(PurchaseOrder.class, poid);
            }
            
            if(dataMap.containsKey("entrynumber")){
                po.setPurchaseOrderNumber((String) dataMap.get("entrynumber"));
            }
            if(dataMap.containsKey("autogenerated")){
                po.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if(dataMap.containsKey("memo")){
                po.setMemo((String) dataMap.get("memo"));
            }
            if(dataMap.containsKey("vendorid")){
                Vendor vendor = (dataMap.get("vendorid")==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String) dataMap.get("vendorid")));
                po.setVendor(vendor);
            }
            if(dataMap.containsKey("orderdate")){
                po.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if(dataMap.containsKey("duedate")){
                po.setDueDate((Date) dataMap.get("duedate"));
            }
            if(dataMap.containsKey("companyid")){
                Company cmp = (dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid")));
                po.setCompany(cmp);
            }
            if(dataMap.containsKey("taxid")){
                Tax tax = (dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("taxid")));
                po.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId")==null?null:(CostCenter)hibernateTemplate.get(CostCenter.class, (String) dataMap.get("costCenterId"));
                po.setCostcenter(costCenter);
            }
            if(dataMap.containsKey("podetails")){
                if(dataMap.get("podetails")!=null) {
                    po.setRows((Set<PurchaseOrderDetail>) dataMap.get("podetails"));
                }
            }
            hibernateTemplate.saveOrUpdate(po);
            list.add(po);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updatePurchaseOrder : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject savePurchaseOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try{
            String podid = (String) dataMap.get("id");
            PurchaseOrderDetail pod = new PurchaseOrderDetail();
            if(!StringUtil.isNullOrEmpty(podid)) {
                pod = (PurchaseOrderDetail) hibernateTemplate.get(PurchaseOrderDetail.class, podid);
            }

            if (dataMap.containsKey("poid")) {
                PurchaseOrder po = dataMap.get("poid")==null?null:(PurchaseOrder) hibernateTemplate.get(PurchaseOrder.class, (String) dataMap.get("poid"));
                pod.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("srno")) {
                pod.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid")==null?null:(Product) hibernateTemplate.get(Product.class, (String) dataMap.get("productid"));
                pod.setProduct(product);
            }
            if (dataMap.containsKey("rate")) {
                pod.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                pod.setQuantity((Integer) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("remark")){
                pod.setRemark((String) dataMap.get("remark"));
            }
            if(dataMap.containsKey("companyid")){
                Company cmp = (dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid")));
                pod.setCompany(cmp);
            }
            if(dataMap.containsKey("rowtaxid")){
                Tax rowtax = (dataMap.get("rowtaxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("rowtaxid")));
                pod.setTax(rowtax);
            }
            hibernateTemplate.saveOrUpdate(pod);
            list.add(pod);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePurchaseOrderDetails : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject savePODetails(JSONArray podjarr, String poid, String companyid, boolean issave) throws ServiceException {
        List list = new ArrayList();
        try{
            HashSet podetails = new HashSet();
            for(int i=0; i<podjarr.length(); i++){
                JSONObject jobj=podjarr.getJSONObject(i);
                PurchaseOrderDetail pod = new PurchaseOrderDetail();
                if (jobj.has("productid")) {
                    pod.setProduct((Product) hibernateTemplate.get(Product.class, jobj.getString("productid")));
                }
                if (jobj.has("rate")) {
                    pod.setRate(jobj.getDouble("rate"));
                }
                if (jobj.has("quantity")) {
                    pod.setQuantity(jobj.getInt("quantity"));
                }
                if (jobj.has("remark")){
                    pod.setRemark(jobj.optString("remark"));
                }
                if (poid != null) {
                    pod.setPurchaseOrder((PurchaseOrder) hibernateTemplate.get(PurchaseOrder.class, poid));
                }
                if (companyid != null){
                    pod.setCompany((Company) hibernateTemplate.get(Company.class, companyid));
                }
                if (issave) {
                    hibernateTemplate.saveOrUpdate(pod);
                }
                podetails.add(pod);
            }
            list.add(podetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.savePODetails : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getPurchaseOrders(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
//            KWLCurrency kwlcurrency = (KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String) request.get("currencyid"));
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where deleted=false and company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and (purchaseOrderNumber like ? or po.memo like ? or po.vendor.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and po.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (po.orderDate >=? and po.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "from PurchaseOrder po" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        }catch(Exception ex){
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getPurchaseOrders : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getPOCount(String pono, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseOrder where purchaseOrderNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{pono, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deletePurchaseOrder(String poid, String companyid) throws ServiceException {
        String query = "update PurchaseOrder set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{poid, companyid});
        return new KwlReturnObject(true, "Purchase Order has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getPO_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from PurchaseOrderDetail pod where product.ID=? and pod.company.companyID=? and pod.purchaseOrder.deleted=false";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getPurchaseOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PurchaseOrderDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingPurchaseOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingPurchaseOrderDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

// Billing Purchase Order
    public KwlReturnObject getBPOCount(String pono, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from BillingPurchaseOrder where purchaseOrderNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{pono, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject saveBillingPurchaseOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try{
            String poid = (String) dataMap.get("id");
            BillingPurchaseOrder po = new BillingPurchaseOrder();
            if(StringUtil.isNullOrEmpty(poid)) {
                po.setDeleted(false);
            } else {
                po = (BillingPurchaseOrder) hibernateTemplate.get(BillingPurchaseOrder.class, poid);
            }

            if(dataMap.containsKey("entrynumber")){
                po.setPurchaseOrderNumber((String) dataMap.get("entrynumber"));
            }
            if(dataMap.containsKey("autogenerated")){
                po.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if(dataMap.containsKey("memo")){
                po.setMemo((String) dataMap.get("memo"));
            }
            if(dataMap.containsKey("vendorid")){
                Vendor vendor = (dataMap.get("vendorid")==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String) dataMap.get("vendorid")));
                po.setVendor(vendor);
            }
            if(dataMap.containsKey("orderdate")){
                po.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if(dataMap.containsKey("duedate")){
                po.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("debitfrom")) {
                Account account = dataMap.get("debitfrom")==null?null:(Account) hibernateTemplate.get(Account.class, (String) dataMap.get("debitfrom"));
                po.setDebitFrom(account);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("taxid"));
                po.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId")==null?null:(CostCenter)hibernateTemplate.get(CostCenter.class, (String) dataMap.get("costCenterId"));
                po.setCostcenter(costCenter);
            }
            if(dataMap.containsKey("companyid")){
                Company cmp = (dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid")));
                po.setCompany(cmp);
            }
            if(dataMap.containsKey("podetails")){
                if(dataMap.get("podetails")!=null) {
                    po.setRows((Set<BillingPurchaseOrderDetail>) dataMap.get("podetails"));
                }
            }
            hibernateTemplate.saveOrUpdate(po);
            list.add(po);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.updateBillingPurchaseOrder : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Billing Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject saveBillingPurchaseOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try{
            String podid = (String) dataMap.get("id");
            BillingPurchaseOrderDetail pod = new BillingPurchaseOrderDetail();
            if(!StringUtil.isNullOrEmpty(podid)) {
                pod = (BillingPurchaseOrderDetail) hibernateTemplate.get(BillingPurchaseOrderDetail.class, podid);
            }

            if (dataMap.containsKey("poid")) {
                BillingPurchaseOrder po = dataMap.get("poid")==null?null:(BillingPurchaseOrder) hibernateTemplate.get(BillingPurchaseOrder.class, (String) dataMap.get("poid"));
                pod.setPurchaseOrder(po);
            }
            if (dataMap.containsKey("srno")) {
                pod.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("productdetail")) {
                pod.setProductDetail((String) dataMap.get("productdetail"));
            }
            if (dataMap.containsKey("rate")) {
                pod.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                pod.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("remark")){
                pod.setRemark((String) dataMap.get("remark"));
            }
            if(dataMap.containsKey("companyid")){
                Company company = (dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid")));
                pod.setCompany(company);
            }
            if(dataMap.containsKey("rowtaxid")){
                Tax rowtax = (dataMap.get("rowtaxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("rowtaxid")));
                pod.setTax(rowtax);
            }
            hibernateTemplate.saveOrUpdate(pod);
            list.add(pod);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accPurchaseOrderImpl.saveBillingPurchaseOrderDetails : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Billing Purchase Order has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getBillingPurchaseOrders(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where deleted=false and company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and (purchaseOrderNumber like ? or po.memo like ? or po.vendor.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and po.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (po.orderDate >=? and po.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            String query = "from BillingPurchaseOrder po" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (!StringUtil.isNullOrEmpty(start) && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        }catch(Exception ex){
            throw ServiceException.FAILURE("accPurchaseOrderImpl.getBillingPurchaseOrders : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject deleteBillingPurchaseOrder(String poid, String companyid) throws ServiceException {
     try{   
    	 String query = "update BillingPurchaseOrder set deleted=true where ID=? and company.companyID=?";
         int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{poid, companyid});
         return new KwlReturnObject(true, "Billing Purchase Order has been deleted successfully.", null, null, numRows);
     	}
     catch(Exception ex){
         throw ServiceException.FAILURE("accPurchaseOrderImpl.deleteBillingPurchaseOrder : "+ex.getMessage(), ex);
     }
    }
    
    @Override
	public KwlReturnObject deletePurchaseOrderDetails(String poid,String companyid) throws ServiceException {
		//Delete Goods Receipt Details
    try{   
    	String delQuery = "delete from PurchaseOrderDetail pod where pod.purchaseOrder.ID=? and pod.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{poid, companyid});
        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
       }
    catch(Exception ex){
        throw ServiceException.FAILURE("Cannot Edit Purchase Order as it is used in Vendor Invoice already.", ex);
     }  
	}

	@Override
	public KwlReturnObject deleteBillingPurchaseOrderDetails(String poid,String companyid) throws ServiceException {
	try{	
		String delQuery = "delete from BillingPurchaseOrderDetail pod where pod.purchaseOrder.ID=? and pod.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{poid, companyid});
        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
	   }
    catch(Exception ex){
        throw ServiceException.FAILURE("Cannot Edit Purchase Order as it is used in Vendor Invoice already.",ex);//+ex.getMessage(), ex);
     } 
	}
}
