/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.creditnote;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.BillingCreditNote;
import com.krawler.hql.accounting.BillingCreditNoteDetail;
import com.krawler.hql.accounting.CreditNote;
import com.krawler.hql.accounting.CreditNoteDetail;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.spring.accounting.costCenter.CCConstants;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accCreditNoteImpl implements accCreditNoteDAO{
    private HibernateTemplate hibernateTemplate;
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.hibernateTemplate = new HibernateTemplate(sessionFactory);
	}

    public KwlReturnObject addCreditNote(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            CreditNote cn = new CreditNote();
            cn.setDeleted(false);
            if (hm.containsKey("entrynumber")) {
                cn.setCreditNoteNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                cn.setCurrency(currency);
            }
            if (hm.containsKey("autogenerated")) {
                cn.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                cn.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("sequence")) {
                cn.setSequence((Integer) hm.get("sequence"));
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                cn.setCompany(company);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                cn.setJournalEntry(je);
            }
            if (hm.containsKey("cndetails")) {
                cn.setRows((Set<CreditNoteDetail>) hm.get("cndetails"));
            }
            hibernateTemplate.saveOrUpdate(cn);
            list.add(cn);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accCreditNoteImpl.addCreditNote : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Credit Note has been added successfully", null, list, list.size());
    }

    public KwlReturnObject updateCreditNote(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            String cnid = (String)  hm.get("cnid");
            CreditNote cn = (CreditNote) hibernateTemplate.get(CreditNote.class, cnid);
            if(cn != null) {
                if (hm.containsKey("entrynumber")) {
                    cn.setCreditNoteNumber((String) hm.get("entrynumber"));
                }
                if (hm.containsKey("currencyid")) {
                    KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                    cn.setCurrency(currency);
                }
                if (hm.containsKey("autogenerated")) {
                    cn.setAutoGenerated((Boolean) hm.get("autogenerated"));
                }
                if (hm.containsKey("memo")) {
                    cn.setMemo((String) hm.get("memo"));
                }
                if (hm.containsKey("sequence")) {
                    cn.setSequence((Integer) hm.get("sequence"));
                }
                if (hm.containsKey("companyid")) {
                    Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                    cn.setCompany(company);
                }
                if (hm.containsKey("journalentryid")) {
                    JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                    cn.setJournalEntry(je);
                }
                if (hm.containsKey("cndetails")) {
                    cn.setRows((Set<CreditNoteDetail>) hm.get("cndetails"));
                }
                hibernateTemplate.saveOrUpdate(cn);
            }
            list.add(cn);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accCreditNoteImpl.updateCreditNote : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Credit Note has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getCreaditNote(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try{
            DateFormat df = (DateFormat) request.get(Constants.df);
            String startstr = (String) request.get(Constants.start);
            String limitstr = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where ac.ID=c.account.ID and cn.deleted=false and cn.company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for(int i=0;i<=3;i++){
                    params.add(ss + "%");
                }
                condition += " and ( cn.creditNoteNumber like ? or c.name like ? or cn.journalEntry.entryNumber like ? or cn.memo like ? ) ";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and cn.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (cn.journalEntry.entryDate >=? and cn.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "select cn, c, jed from CreditNote cn inner join cn.journalEntry je inner join je.details jed inner join jed.account ac, Customer c" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(startstr) == false && StringUtil.isNullOrEmpty(limitstr) == false) {
                int start = Integer.parseInt(startstr);
                int limit = Integer.parseInt(limitstr);
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{start, limit});
            }
        } catch (Exception ex){
            throw ServiceException.FAILURE("accCreditNoteImpl.getCreaditNote:"+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getCNFromInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from CreditNoteDetail cn  where cn.invoiceRow.invoice.ID=? and cn.creditNote.deleted=false and cn.company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNFromNoteNo(String noteno, String companyid) throws ServiceException {
        String selQuery = "from CreditNote where creditNoteNumber=? and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{noteno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNSequenceNo(String companyid, Date applydate) throws ServiceException {
        String selQuery = "select count(cn.ID) from CreditNote cn inner join cn.journalEntry je where cn.company.companyID=? and je.entryDate<=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{companyid, applydate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNRowsDiscountFromInvoice(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query="select cn, cnr, cnd from CreditNote cn left join cn.rows cnr left join cn.discounts cnd where cn.deleted=false and (cnr.invoiceRow.invoice.ID=? or cnd.invoice.ID=?) order by cn.sequence";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid, invoiceid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNRowsDiscountFromBillingInvoice(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query="select cn, cnr, cnd from BillingCreditNote cn left join cn.rows cnr left join cn.discounts cnd where cn.deleted=false and (cnr.invoiceRow.billingInvoice.ID=? or cnd.invoice.ID=?) order by cn.sequence";
        //String query="select cn, cnr, cnd from CreditNote cn left join cn.rows cnr left join cn.discounts cnd where cn.deleted=false and (cnr.invoiceRow.invoice.ID=? or cnd.invoice.ID=?) order by cn.sequence";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid, invoiceid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCreditNoteDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from CreditNoteDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingCreditNoteDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingCreditNoteDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getCNFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from CreditNote where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getJEFromCN(String cnid) throws ServiceException {
        String selQuery = "select cn.journalEntry.ID from CreditNote cn where cn.ID=? and cn.company.companyID=cn.journalEntry.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNDFromCN(String cnid) throws ServiceException {
        String selQuery = "select cnd.discount.ID from CreditNoteDiscount cnd where cnd.creditNote.ID=? and cnd.company.companyID=cnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNDFromCND(String cnid) throws ServiceException {
        String selQuery = "select cnd.discount.ID from CreditNoteDetail cnd where cnd.creditNote.ID=? and cnd.company.companyID=cnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNIFromCND(String cnid) throws ServiceException {
        String selQuery = "select cnd.inventory.ID from CreditNoteDetail cnd where cnd.creditNote.ID=? and cnd.company.companyID=cnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deleteCreditNote(String cnid, String companyid) throws ServiceException {
        String query = "update CreditNote set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{cnid, companyid});
        return new KwlReturnObject(true, "Credit Note has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getBillingCreditNoteDet(String bInvid, String companyid) throws ServiceException {
        //"from BillingCreditNoteDetail dn  where dn.invoiceRow.billingInvoice.ID in ( "+qMarks +")  and dn.creditNote.deleted=false and dn.company.companyID=?";
        String query = "from BillingCreditNoteDetail dn  where dn.invoiceRow.billingInvoice.ID = ?  and dn.creditNote.deleted=false and dn.company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{bInvid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    
    public KwlReturnObject getBCNFromNoteNo(String noteno, String companyid) throws ServiceException {
        String selQuery = "from BillingCreditNote where creditNoteNumber=? and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{noteno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBCNSequenceNo(String companyid, Date applydate) throws ServiceException {
        String selQuery = "select count(cn.ID) from BillingCreditNote cn inner join cn.journalEntry je  where cn.company.companyID=? and je.entryDate<=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{companyid, applydate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject saveBillingCreditNote(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            String cnid = (String)  hm.get("id");
            BillingCreditNote cn = new BillingCreditNote();
            if (StringUtil.isNullOrEmpty(cnid)) {
                cn.setDeleted(false);
            } else {
                cn = (BillingCreditNote) hibernateTemplate.get(BillingCreditNote.class, cnid);
            }

            if (hm.containsKey("entrynumber")) {
                cn.setCreditNoteNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                cn.setCurrency(currency);
            }
            if (hm.containsKey("autogenerated")) {
                cn.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                cn.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("sequence")) {
                cn.setSequence((Integer) hm.get("sequence"));
            }
            if (hm.containsKey("externalCurrencyRate")) {
                cn.setExternalCurrencyRate((Integer) hm.get("externalCurrencyRate"));
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                cn.setCompany(company);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                cn.setJournalEntry(je);
            }
            if (hm.containsKey("cndetails")) {
                cn.setRows((Set<BillingCreditNoteDetail>) hm.get("cndetails"));
            }
            hibernateTemplate.saveOrUpdate(cn);
            list.add(cn);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accCreditNoteImpl.saveCreditNote : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Credit Note has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getBillingCreaditNote(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try{
            DateFormat df = (DateFormat) request.get(Constants.df);
            String startstr = (String) request.get(Constants.start);
            String limitstr = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where ac.ID=c.account.ID and cn.deleted=false and cn.company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for(int i=0;i<=3;i++){
                    params.add(ss + "%");
                }
                condition += " and ( cn.creditNoteNumber like ? or c.name like ? or cn.journalEntry.entryNumber like ? or cn.memo like ? ) ";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and cn.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (cn.journalEntry.entryDate >=? and cn.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "select cn, c, jed from BillingCreditNote cn inner join cn.journalEntry je inner join je.details jed inner join jed.account ac, Customer c" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(startstr) == false && StringUtil.isNullOrEmpty(limitstr) == false) {
                int start = Integer.parseInt(startstr);
                int limit = Integer.parseInt(limitstr);
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{start, limit});
            }
        } catch (Exception ex){
            throw ServiceException.FAILURE("accCreditNoteImpl.getBillingCreaditNote:"+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getJEFromBCN(String cnid) throws ServiceException {
        String selQuery = "select cn.journalEntry.ID from BillingCreditNote cn where cn.ID=? and cn.company.companyID=cn.journalEntry.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNDFromBCN(String cnid) throws ServiceException {
        String selQuery = "select cnd.discount.ID from BillingCreditNoteDiscount cnd where cnd.creditNote.ID=? and cnd.company.companyID=cnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCNDFromBCND(String cnid) throws ServiceException {
        String selQuery = "select cnd.discount.ID from BillingCreditNoteDetail cnd where cnd.creditNote.ID=? and cnd.company.companyID=cnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{cnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject deleteBillingCreditNote(String cnid, String companyid) throws ServiceException {
        String query = "update BillingCreditNote set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{cnid, companyid});
        return new KwlReturnObject(true, "Billing Credit Note has been deleted successfully.", null, null, numRows);
    }


}
