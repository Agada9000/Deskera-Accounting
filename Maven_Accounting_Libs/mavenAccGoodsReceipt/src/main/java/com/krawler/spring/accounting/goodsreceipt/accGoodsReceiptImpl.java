/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.goodsreceipt;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.BillingGoodsReceipt;
import com.krawler.hql.accounting.BillingGoodsReceiptDetail;
import com.krawler.hql.accounting.CompanyAccountPreferences;
import com.krawler.hql.accounting.Discount;
import com.krawler.hql.accounting.ExchangeRateDetails;
import com.krawler.hql.accounting.ExpenseGRDetail;
import com.krawler.hql.accounting.GoodsReceipt;
import com.krawler.hql.accounting.GoodsReceiptDetail;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.hql.accounting.JournalEntryDetail;
import com.krawler.hql.accounting.Tax;
import com.krawler.hql.accounting.Vendor;
import com.krawler.spring.common.KwlReturnObject;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accGoodsReceiptImpl implements accGoodsReceiptDAO, GoodsReceiptConstants{
    private HibernateTemplate hibernateTemplate;
    public void setSessionFactory (SessionFactory sessionFactory) {
        this.hibernateTemplate = new HibernateTemplate(sessionFactory);
    }

    public KwlReturnObject addGoodsReceipt(Map<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        GoodsReceipt receipt = new GoodsReceipt();
        try{
           if (hm.containsKey(GRID)) {
                 if(!StringUtil.isNullOrEmpty((String) hm.get(GRID)))
                receipt = (GoodsReceipt) hibernateTemplate.get(GoodsReceipt.class, (String) hm.get(GRID));
            }
            if (hm.containsKey(ENTRYNUMBER)) {
                receipt.setGoodsReceiptNumber((String) hm.get(ENTRYNUMBER));
            }
            if (hm.containsKey(AUTOGENERATED)) {
                receipt.setAutoGenerated((Boolean) hm.get(AUTOGENERATED));
            } 
            if (hm.containsKey(ISEXPENSETYPE)) {
                receipt.setIsExpenseType((Boolean) hm.get(ISEXPENSETYPE));
            }
            if (hm.containsKey(MEMO)) {
                receipt.setMemo((String) hm.get(MEMO));
            }
            if (hm.containsKey(BILLTO)) {
                receipt.setBillFrom((String) hm.get(BILLTO));
            }
            if (hm.containsKey(SHIPADDRESS)) {
                receipt.setShipFrom((String) hm.get(SHIPADDRESS));
            }
            if (hm.containsKey(SHIPDATE)) {
                receipt.setShipDate((Date) hm.get(SHIPDATE));
            }
            if (hm.containsKey(DUEDATE)) {
                receipt.setDueDate((Date) hm.get(DUEDATE));
            }
            if (hm.containsKey(DISCOUNTID)) {
                Discount dsc = hm.get(DISCOUNTID)==null?null:(Discount) hibernateTemplate.get(Discount.class, (String)hm.get(DISCOUNTID));
                receipt.setDiscount(dsc);
            }
            if (hm.containsKey(TAXID)) {
                Tax tax = hm.get(TAXID)==null?null:(Tax) hibernateTemplate.get(Tax.class, (String)hm.get(TAXID));
                receipt.setTax(tax);
            }
            if (hm.containsKey(VENDORENTRYID)) {
                JournalEntryDetail vendorje = hm.get(VENDORENTRYID)==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get(VENDORENTRYID));
                receipt.setVendorEntry(vendorje);
            }
            if (hm.containsKey(SHIPENTRYID)) {
                JournalEntryDetail shipje = hm.get(SHIPENTRYID)==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get(SHIPENTRYID));
                receipt.setShipEntry(shipje);
            }
            if (hm.containsKey("otherentryid")) {
                JournalEntryDetail otherje = hm.get("otherentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("otherentryid"));
                receipt.setOtherEntry(otherje);
            }
            if (hm.containsKey(TAXENTRYID)) {
                JournalEntryDetail taxje = hm.get(TAXENTRYID)==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get(TAXENTRYID));
                receipt.setTaxEntry(taxje);
            }
            if (hm.containsKey(CURRENCYID)) {
                KWLCurrency currency = hm.get(CURRENCYID)==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get(CURRENCYID));
                receipt.setCurrency(currency);
            }
            if (hm.containsKey(COMPANYID)) {
                Company company = hm.get(COMPANYID)==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get(COMPANYID));
                receipt.setCompany(company);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                receipt.setJournalEntry(je);
            }
            if (hm.containsKey(ERDID)) {
                ExchangeRateDetails erd = hm.get(ERDID)==null?null:(ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, (String) hm.get(ERDID));
                receipt.setExchangeRateDetail(erd);
            }
            if (hm.containsKey(VENDORID)) {
                Vendor vendor = hm.get(VENDORID)==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String) hm.get(VENDORID));
                receipt.setVendor(vendor);
            }
            if (hm.containsKey(GRDETAILS)) {
                receipt.setRows((Set<GoodsReceiptDetail>) hm.get(GRDETAILS));
            }
           if (hm.containsKey(EXPENSEGRDETAILS)) {
                receipt.setExpenserows((Set<ExpenseGRDetail>) hm.get(EXPENSEGRDETAILS));
            }
            hibernateTemplate.saveOrUpdate(receipt);
            list.add(receipt);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.addGoodsReceipt : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Goods Receipt has been added successfully", null, list, list.size());
    }

    public KwlReturnObject updateGoodsReceipt(Map<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            String grid = (String) hm.get(GRID);
            GoodsReceipt receipt = (GoodsReceipt) hibernateTemplate.get(GoodsReceipt.class, grid);
            if(receipt != null) {
                if (hm.containsKey(ENTRYNUMBER)) {
                    receipt.setGoodsReceiptNumber((String) hm.get(ENTRYNUMBER));
                }
                if (hm.containsKey(AUTOGENERATED)) {
                    receipt.setAutoGenerated((Boolean) hm.get(AUTOGENERATED));
                }
                if (hm.containsKey(MEMO)) {
                    receipt.setMemo((String) hm.get(MEMO));
                }
                if (hm.containsKey(BILLTO)) {
                    receipt.setBillFrom((String) hm.get(BILLTO));
                }
                if (hm.containsKey(SHIPADDRESS)) {
                    receipt.setShipFrom((String) hm.get(SHIPADDRESS));
                }
                if (hm.containsKey(SHIPDATE)) {
                    receipt.setShipDate((Date) hm.get(SHIPDATE));
                }
                if (hm.containsKey(DUEDATE)) {
                    receipt.setDueDate((Date) hm.get(DUEDATE));
                }
                if (hm.containsKey(DISCOUNTID)) {
                    Discount dsc = hm.get(DISCOUNTID)==null?null:(Discount) hibernateTemplate.get(Discount.class, (String)hm.get(DISCOUNTID));
                    receipt.setDiscount(dsc);
                }
                if (hm.containsKey(TAXID)) {
                    Tax tax = hm.get(TAXID)==null?null:(Tax) hibernateTemplate.get(Tax.class, (String)hm.get(TAXID));
                    receipt.setTax(tax);
                }
                if (hm.containsKey(VENDORENTRYID)) {
                    JournalEntryDetail vendorje = hm.get(VENDORENTRYID)==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get(VENDORENTRYID));
                    receipt.setVendorEntry(vendorje);
                }
                if (hm.containsKey(SHIPENTRYID)) {
                    JournalEntryDetail shipje = hm.get(SHIPENTRYID)==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get(SHIPENTRYID));
                    receipt.setShipEntry(shipje);
                }
                if (hm.containsKey("otherentryid")) {
                    JournalEntryDetail otherje = hm.get("otherentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("otherentryid"));
                    receipt.setOtherEntry(otherje);
                }
                if (hm.containsKey(TAXENTRYID)) {
                    JournalEntryDetail taxje = hm.get(TAXENTRYID)==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get(TAXENTRYID));
                    receipt.setTaxEntry(taxje);
                }
                if (hm.containsKey(CURRENCYID)) {
                    KWLCurrency currency = hm.get(CURRENCYID)==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get(CURRENCYID));
                    receipt.setCurrency(currency);
                }
                if (hm.containsKey(COMPANYID)) {
                    Company company = hm.get(COMPANYID)==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get(COMPANYID));
                    receipt.setCompany(company);
                }
                if (hm.containsKey("journalentryid")) {
                    JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                    receipt.setJournalEntry(je);
                }
                if (hm.containsKey(ERDID)) {
                    ExchangeRateDetails erd = hm.get(ERDID)==null?null:(ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, (String) hm.get(ERDID));
                    receipt.setExchangeRateDetail(erd);
                }
                if (hm.containsKey(GRDETAILS)) {
                    receipt.setRows((Set<GoodsReceiptDetail>) hm.get(GRDETAILS));
                }
                if (hm.containsKey(VENDORID)) {
                    Vendor vendor = hm.get(VENDORID)==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String) hm.get(VENDORID));
                    receipt.setVendor(vendor);
                }
                if (hm.containsKey(EXPENSEGRDETAILS)) {
                    receipt.setExpenserows((Set<ExpenseGRDetail>) hm.get(EXPENSEGRDETAILS));
                }
                hibernateTemplate.saveOrUpdate(receipt);
            }
            list.add(receipt);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.updateGoodsReceipt : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Goods Receipt has been updated successfully", null, list, list.size());
    }

    public KwlReturnObject getGoodsReceipts(Map<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        try {
            String companyid = (String) request.get(COMPANYID);
            DateFormat df = (DateFormat) request.get("dateformat");

            CompanyAccountPreferences pref = (CompanyAccountPreferences) hibernateTemplate.get(CompanyAccountPreferences.class, companyid);
//            KWLCurrency currency = (KWLCurrency) hibernateTemplate.get(KWLCurrency.class, currencyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            
            if(request.get("year") != null){		// Check for the selected year in the year combo for charts			Neeraj
                	int year = Integer.parseInt(request.get("year").toString());
                	startFinYearCal.set(Calendar.YEAR,year); 
                	endFinYearCal.set(Calendar.YEAR,year);
            }
            
            endFinYearCal.add(Calendar.YEAR, 1);
            String vendorid = (String) request.get(VENDORID);
            String customerid = (vendorid == null ? (String) request.get("accid") : vendorid);
            String ss = (String) request.get("ss");
            String cashAccount = pref.getCashAccount().getID();
            boolean cashonly = false;
            boolean creditonly = false;
            boolean personGroup = false;
            boolean isagedgraph = false;
            boolean isexpenseinv=false;
            boolean only1099Vend=false;
            boolean for1099Report=false;
            String group = "";
            cashonly = Boolean.parseBoolean((String) request.get("cashonly"));
            creditonly = Boolean.parseBoolean((String) request.get("creditonly"));
            only1099Vend = Boolean.parseBoolean((String) request.get("only1099Vend"));
            String billID = (String) request.get("billid");
            String expenseinv=(String) request.get("onlyexpenseinv");
            for1099Report=Boolean.parseBoolean((String) request.get("for1099Report"));
            boolean deleted =Boolean.parseBoolean((String)request.get(DELETED));
            boolean nondeleted =Boolean.parseBoolean((String)request.get("nondeleted"));

            if (cashonly) {
                customerid = cashAccount;
            }
//            boolean ignoreZero = request.get("ignorezero") != null;
            String dueDate = (String) request.get("curdate");
            personGroup = Boolean.parseBoolean((String) request.get("persongroup"));
            isagedgraph = Boolean.parseBoolean((String) request.get("isagedgraph"));
            ArrayList params = new ArrayList();
            String condition = "";
            String venCondition = "";
            params.add(companyid);
            if (!StringUtil.isNullOrEmpty(expenseinv)) {
                isexpenseinv = Boolean.parseBoolean(expenseinv);
                params.add(isexpenseinv);
                condition += " and gr.isExpenseType=?";
                
            }
            if (!StringUtil.isNullOrEmpty(dueDate)) {
                if(for1099Report){
                    params.add(df.parse(dueDate));
                    condition += " and gr.journalEntry.entryDate<=?";
                }
                else {
                    params.add(df.parse(dueDate));
                    condition += " and gr.dueDate<=?";
                }
            }
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                condition += " and gr.ID=?";
            } else {
                if (!StringUtil.isNullOrEmpty(customerid)) {
                    params.add(customerid);
                    condition += " and gr.vendorEntry.account.ID=?";
                }else{
                    String qMarks = "null,";
                    if (!creditonly) {
                        qMarks += "?,";
                        params.add(cashAccount);
                    }//else{
                        if (only1099Vend){     //remove this condition in case of viewing all vendors in 1099 [PS]
                            venCondition += " and taxEligible=true"; //gr.vendorEntry.account.ID in(select v.ID from Vendor v v.taxEligible=true and v.ID=gr.vendorEntry.account.ID";
                        }
                        String q = "select ID from Vendor where company.companyID=?"+venCondition;
                        Iterator itrcust = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{companyid}).iterator();
                        while (itrcust.hasNext()) {
                            qMarks += "?,";
                            params.add(itrcust.next());
                        }
                    //}
                    qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
                    condition += " and gr.vendorEntry.account.ID in (" + qMarks + ")";
                }
            }
            
            String costCenterId = (String) request.get("costCenterId");
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and gr.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (gr.journalEntry.entryDate >=? and gr.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                }
            if(for1099Report){
                if (StringUtil.isNullOrEmpty(ss) == false) {
                        params.add(ss + "%");
                    condition += " and gr.vendorEntry.account.name like ? ";
                }
            }else{
                if (StringUtil.isNullOrEmpty(ss) == false) {
                    for (int i = 0; i <= 4; i++) {
                        params.add(ss + "%");
                    }
                    condition += " and (gr.goodsReceiptNumber like ? or gr.billFrom like ?  or gr.journalEntry.entryNumber like ? or gr.memo like ? or gr.vendorEntry.account.name like ? ) ";
                }
            }
            if (personGroup) {
                params.add(startFinYearCal.getTime());
                params.add(endFinYearCal.getTime());
                condition += " and gr.dueDate>=? and gr.dueDate<=?";
            }
            if (isagedgraph) {
                params.add(startFinYearCal.getTime());
                params.add(endFinYearCal.getTime());
                condition += " and gr.dueDate>=? and gr.dueDate<=?";
            }
             if (nondeleted)
                condition += " and gr.deleted=false ";
            else if (deleted)
                condition += " and gr.deleted=true ";
            String query = "from GoodsReceipt gr where gr.company.companyID=? " + condition + group + " order by gr.vendorEntry.account.ID";
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getGoodsReceipts : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deleteGoodsReceipts(String receiptid, String companyid) throws ServiceException {
        //Delete Goods Receipts
        String delQuery = "delete from GoodsReceipt gr where ID=? and gr.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Goods Receipt has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteGoodsReceiptEntry(String grid, String companyid) throws ServiceException {
        String query = "update GoodsReceipt gr set gr.deleted=true where gr.ID=? and gr.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{grid, companyid});
        return new KwlReturnObject(true, "Goods Receipt has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteBillingGoodsReceiptEntry(String grid, String companyid) throws ServiceException {
        String query = "update BillingGoodsReceipt gr set gr.deleted=true where gr.ID = ? and gr.company.companyID=?";
//        String query = "update GoodsReceipt gr set gr.deleted=true where gr.ID=? and gr.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{grid, companyid});
        return new KwlReturnObject(true, "Goods Receipt has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getGRJournalEntry(String grid) throws ServiceException {
        String selQuery = "select gr.journalEntry.ID from GoodsReceipt gr where gr.ID=? and gr.company.companyID=gr.journalEntry.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{grid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGoodsReceiptDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from GoodsReceiptDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingGoodsReceiptDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingGoodsReceiptDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }
   public KwlReturnObject getExpenseGRDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ExpenseGRDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }
    public KwlReturnObject getCalculatedGRTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        String taxid = (String) requestParams.get("taxid");
        String query = "from GoodsReceipt gr where gr.tax.ID = ? and gr.deleted=false";
        returnlist = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{taxid});
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    public KwlReturnObject getCalculatedGRDtlTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        String taxid = (String) requestParams.get("taxid");
        String query = "from GoodsReceiptDetail grd where grd.tax.ID = ? and grd.goodsReceipt.deleted=false";
        returnlist = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{taxid});
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    public KwlReturnObject getCalculatedExpenseGRDtlTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        String taxid = (String) requestParams.get("taxid");
        String query = "from ExpenseGRDetail grd where grd.tax.ID = ? and grd.goodsReceipt.deleted=false";
        returnlist = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{taxid});
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
    public KwlReturnObject getGRDiscount(String grid) throws ServiceException {
        String selQuery = "select gr.discount.ID from GoodsReceipt gr where gr.ID=? and gr.company.companyID=gr.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{grid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBGRDiscount(String bgrid, String companyid) throws ServiceException {
        String selQuery = "from BillingGoodsReceipt gr where gr.ID = ? and gr.company.companyID = ?";
        //String selQuery = "select gr.discount.ID from GoodsReceipt gr where gr.ID=? and gr.company.companyID=gr.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{bgrid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGRDetailsDiscount(String grid) throws ServiceException {
        String selQuery = "select grd.discount.ID from GoodsReceiptDetail grd where grd.goodsReceipt.ID=? and grd.company.companyID=grd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{grid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBGRDetailsDiscount(String bgrid, String companyid) throws ServiceException {
        String selQuery = "from BillingGoodsReceiptDetail grd where grd.billingGoodsReceipt.ID = ? and grd.company.companyID = ?";
//        String selQuery = "select grd.discount.ID from GoodsReceiptDetail grd where grd.goodsReceipt.ID=? and grd.company.companyID=grd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{bgrid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGRInventory(String grid) throws ServiceException {
        String selQuery = "select grd.inventory.ID from GoodsReceiptDetail grd where grd.goodsReceipt.ID=? and grd.company.companyID=grd.inventory.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{grid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deleteGoodsReceiptDetails(String receiptid, String companyid) throws ServiceException {
        //Delete Goods Receipt Details
        String delQuery = "delete from GoodsReceiptDetail where goodsReceipt.ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
    }
        public KwlReturnObject deleteBillingGoodsReceiptDetails(String receiptid, String companyid) throws ServiceException {
        //Delete Goods Receipt Details
        String delQuery = "delete from BillingGoodsReceiptDetail where billingGoodsReceipt.ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getReceiptFromNo(String receiptno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceipt where goodsReceiptNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{receiptno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getReceiptDFromPOD(String podid) throws ServiceException {
        List list = new ArrayList();
        String query = "from GoodsReceiptDetail ge where ge.purchaseorderdetail.ID = ?";
        list =  HibernateUtil.executeQuery(hibernateTemplate, query, podid);
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGRFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from GoodsReceipt where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

       public KwlReturnObject getJEFromGR(String greceiptid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "select gr.journalEntry.ID from GoodsReceipt gr where gr.ID=? and gr.company.companyID=gr.journalEntry.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{greceiptid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getFromBGR(String jeid, String companyid) throws ServiceException {
        String selQuery = "from BillingGoodsReceipt gr where gr.ID = ? and gr.company.companyID = ?";
//        String selQuery = "from GoodsReceipt where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGoodsReceiptData (Map requestParam) throws ServiceException{
        List al = new ArrayList();
        List list = new ArrayList();
        String query = "from GoodsReceiptDetail grd ";
        String queryParam = "where grd.goodsReceipt.deleted=false";

        Calendar startcal = Calendar.getInstance();
        Calendar endcal = Calendar.getInstance();
        
        if(requestParam.containsKey(PRODUCTID)){
            al.add(requestParam.get(PRODUCTID));
            queryParam += (queryParam.length()>0 ? " and " : " where ") + " inventory.product.ID=? ";
        }
        
        if(requestParam.containsKey("stDate")){
            Date stDate = (Date) requestParam.get("stDate");
            if(stDate!=null){
                startcal.setTime(stDate);
                al.add(startcal.getTime());
                queryParam += (queryParam.length()>0 ? " and " : " where ") + " inventory.updateDate>= ?";
            }
        }
        
        if(requestParam.containsKey("endDate")){
            Date endDate = (Date) requestParam.get("endDate");
            if(endDate!=null){
                endcal.setTime(endDate);
                endcal.add(Calendar.DAY_OF_MONTH, -1);
                al.add(endcal.getTime());
                queryParam += (queryParam.length()>0 ? " and " : " where ") + " inventory.updateDate<= ? ";
            }
        }

        if(requestParam.containsKey("costcenterid")){
            al.add(requestParam.get("costcenterid"));
            queryParam += (queryParam.length()>0 ? " and " : " where ") + " grd.goodsReceipt.journalEntry.costcenter.ID=? ";
        }

        query = query + queryParam;
        list =  HibernateUtil.executeQuery(hibernateTemplate, query, al.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBRDFromBPOD(String podid) throws ServiceException {
        List list = new ArrayList();
        String query = "from BillingGoodsReceiptDetail ge where ge.purchaseOrderDetail.ID = ?";
        list =  HibernateUtil.executeQuery(hibernateTemplate, query, podid);
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject saveBillingGoodsReceipt(Map<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
    
        BillingGoodsReceipt bgr = null;
        try{
            String receiptid = (String) hm.get("id");
            if(StringUtil.isNullOrEmpty(receiptid)){
                bgr = new BillingGoodsReceipt();
            }else{
                bgr = (BillingGoodsReceipt) hibernateTemplate.get(BillingGoodsReceipt.class, receiptid);
            }

            if (hm.containsKey("billingGoodsReceiptNumber")) {
                bgr.setBillingGoodsReceiptNumber((String) hm.get("billingGoodsReceiptNumber"));
            }
            if (hm.containsKey("autoGenerated")) {
                bgr.setAutoGenerated((Boolean) hm.get("autoGenerated"));
            }
            if (hm.containsKey("billFrom")) {
                bgr.setBillFrom((String) hm.get("billFrom"));
            }
            if (hm.containsKey("shipFrom")) {
                bgr.setShipFrom((String) hm.get("shipFrom"));
            }
            if (hm.containsKey("dueDate")) {
                bgr.setDueDate((Date) hm.get("dueDate"));
            }
            if (hm.containsKey("shipDate")) {
                bgr.setShipDate((Date) hm.get("shipDate"));
            }
            if (hm.containsKey(MEMO)) {
                bgr.setMemo((String) hm.get(MEMO));
            }
            if (hm.containsKey("dueDate")) {
                bgr.setDueDate((Date) hm.get("dueDate"));
            }
            if (hm.containsKey(DISCOUNTID)) {
                Discount discount = hm.get(DISCOUNTID)==null?null:(Discount) hibernateTemplate.get(Discount.class, (String) hm.get(DISCOUNTID));
                bgr.setDiscount(discount);
            }
            if (hm.containsKey("journalEntryid")) {
                JournalEntry journalEntry = hm.get("journalEntryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String)hm.get("journalEntryid"));
                bgr.setJournalEntry(journalEntry);
            }
            if (hm.containsKey(ROWS)) {
                Set<BillingGoodsReceiptDetail> bgrSet = (Set<BillingGoodsReceiptDetail>) hm.get(ROWS);
                bgr.setRows(bgrSet);
            }
            if (hm.containsKey("vendorEntryid")) {
                JournalEntryDetail vendorEntry = hm.get("vendorEntryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("vendorEntryid"));
                bgr.setVendorEntry(vendorEntry);
            }
            if (hm.containsKey("shipEntryid")) {
                JournalEntryDetail shipEntry = hm.get("shipEntryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("shipEntryid"));
                bgr.setShipEntry(shipEntry);
            }
            if (hm.containsKey("otherEntryid")) {
                JournalEntryDetail otherEntry = hm.get("otherEntryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("otherEntryid"));
                bgr.setOtherEntry(otherEntry);
            }
            if (hm.containsKey("debtorEntryid")) {
                JournalEntryDetail debtorEntry = hm.get("debtorEntryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("debtorEntryid"));
                bgr.setDebtorEntry(debtorEntry);
            }
            if (hm.containsKey("taxEntryid")) {
                JournalEntryDetail taxEntry = hm.get("taxEntryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)hm.get("taxEntryid"));
                bgr.setTaxEntry(taxEntry);
            }
            if (hm.containsKey("exchangeRateDetailsid")) {
                ExchangeRateDetails exchangeRateDetails = hm.get("exchangeRateDetailsid")==null?null:(ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, (String)hm.get("exchangeRateDetailsid"));
                bgr.setExchangeRateDetail(exchangeRateDetails);
            }
            if (hm.containsKey("externalCurrencyRate")) {
                Double externalCurrencyRate = (Double)hm.get("externalCurrencyRate");
                bgr.setExternalCurrencyRate(externalCurrencyRate);
            }
            if (hm.containsKey(COMPANYID)) {
                Company company = hm.get(COMPANYID)==null?null:(Company) hibernateTemplate.get(Company.class, (String)hm.get(COMPANYID));
                bgr.setCompany(company);
            }
            if (hm.containsKey(CURRENCYID)) {
                KWLCurrency currency = hm.get(CURRENCYID)==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get(CURRENCYID));
                bgr.setCurrency(currency);
            }
            if (hm.containsKey(DELETED)) {
                boolean deleted = (Boolean) hm.get(DELETED);
                bgr.setDeleted(deleted);
            }
            if (hm.containsKey(TAXID)) {
                Tax tax = hm.get(TAXID)==null?null:(Tax) hibernateTemplate.get(Tax.class, (String)hm.get(TAXID));
                bgr.setTax(tax);
            }
            if (hm.containsKey(VENDORID)) {
                Vendor vendor = hm.get(VENDORID)==null?null:(Vendor) hibernateTemplate.get(Vendor.class, (String)hm.get(VENDORID));
                bgr.setVendor(vendor);
            }
            hibernateTemplate.saveOrUpdate(bgr);
            list.add(bgr);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accReceiptImpl.updateBillingGoodsReceipt : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Billing Goods Receipt has been updated successfully", null, list, list.size());
    }

        //from BillingGoodsReceipt where billingGoodsReceiptNumber=? and company.companyID=?
     public KwlReturnObject getBillingGoodsReceipt(Map requestParam) throws ServiceException {
        List al = new ArrayList();
        List list = new ArrayList();
        String query = " from BillingGoodsReceipt ";
        String queryParam = "";

        if(requestParam.containsKey("billingGoodsReceiptNumber")){
            al.add(requestParam.get("billingGoodsReceiptNumber"));
            if(queryParam.length() > 0){
                queryParam += " and ";
            }else {
                queryParam += " where ";
            }
            queryParam += " billingGoodsReceiptNumber = ? ";
        }
        if(requestParam.containsKey(COMPANYID)){
            al.add(requestParam.get(COMPANYID));
            if(queryParam.length() > 0){
                queryParam += " and ";
            }else {
                queryParam += " where ";
            }
            queryParam += " company.companyID = ? ";
        }
        if(requestParam.containsKey("accid")){
        	al.add(requestParam.get("accid"));
        	if(queryParam.length() > 0){
                queryParam += " and "; 
            }else {
                queryParam += " where ";
            }
            queryParam += " vendor.ID = ? ";
        }

         query = query + queryParam ;
        list =  HibernateUtil.executeQuery(hibernateTemplate, query, al.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBillingGoodsReceiptsData(Map<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        try {

            String companyid = (String) request.get(COMPANYID);
            //String currencyid = (String) request.get("gcurrencyid");
            DateFormat df = (DateFormat) request.get("dateformat");

//            KWLCurrency currency = (KWLCurrency)session.get(KWLCurrency.class, AuthHandler.getCurrencyID(request));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) hibernateTemplate.get(CompanyAccountPreferences.class, companyid);
            String vendorid = (String) request.get(VENDORID);
            vendorid =vendorid==null? (String) request.get("accid"):vendorid;
//            String vendorid =vendid==null?request.getParameter("accid"):vendid;
            String ss = (String) request.get("ss");
            String cashAccount=pref.getCashAccount().getID();
            boolean cashonly=false;
            boolean creditonly=false;
            cashonly = Boolean.parseBoolean((String) request.get("cashonly"));
            creditonly = Boolean.parseBoolean((String) request.get("creditonly"));
            boolean deleted =Boolean.parseBoolean((String)request.get(DELETED));
            boolean nondeleted =Boolean.parseBoolean((String)request.get("nondeleted"));

//            cashonly =Boolean.parseBoolean(request.getParameter("cashonly"));
//            creditonly =Boolean.parseBoolean(request.getParameter("creditonly"));
            if(cashonly)
                vendorid=cashAccount;

//            boolean ignoreZero = request.getParameter("ignorezero") != null;
//            String dueDate = request.getParameter("curdate");
            String dueDate = (String) request.get("curdate");
            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);
            
            String billID = (String) request.get("billid");
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                condition += " and inv.ID=?";
            } else {
                if (!StringUtil.isNullOrEmpty(vendorid)) {
                    params.add(vendorid);
                    condition += " and inv.vendorEntry.account.ID=?";
                } else {
                    String q = "select ID from Vendor where company.companyID=?";
                    Iterator itrcust = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{companyid}).iterator();
                    String qMarks = "";
                    if(!creditonly){
                        qMarks = "?,";
                        params.add(cashAccount);
                    }
                    while (itrcust.hasNext()) {
                        qMarks += "?,";
                        params.add(itrcust.next());
                    }
                    qMarks=qMarks.substring(0,Math.max(0, qMarks.length()-1));
                    if(!StringUtil.isNullOrEmpty(qMarks))
                    condition += " and inv.vendorEntry.account.ID in (" + qMarks + ")";
                }
            }

            if (!StringUtil.isNullOrEmpty(dueDate)) {
                params.add(df.parse(dueDate));
                condition += " and inv.dueDate<=?";
            }
            String costCenterId = (String) request.get("costCenterId");
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and inv.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if(StringUtil.isNullOrEmpty(ss)==false){
               for(int i=0;i<=4;i++){
                 params.add(ss+"%");
               }
                 condition+= " and (inv.billingGoodsReceiptNumber like ? or inv.billFrom like ?  or inv.journalEntry.entryNumber like ? or inv.memo like ? or inv.vendorEntry.account.name like ? ) ";
            }
            if (nondeleted)
                condition += " and inv.deleted=false ";
            else if (deleted)
                condition += " and inv.deleted=true ";
             String query = "from BillingGoodsReceipt inv where inv.company.companyID=? " + condition + " order by inv.ID";
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());

        } catch (ParseException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getAmtromBPD(String receiptId) throws ServiceException {
        String selQuery = "select sum(amount) from BillingPaymentDetail pd where pd.billingPayment.deleted=false and pd.billingGoodsReceipt.ID=? group by pd.billingGoodsReceipt";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{receiptId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getQtyandUnitCost(String productid, Date endDate) throws ServiceException {
    	try{
    	    String selQuery = "select grd.inventory.quantity, rate, grd.inventory.updateDate from GoodsReceiptDetail grd where grd.inventory.product.ID=? and grd.inventory.updateDate<=? and grd.inventory.carryIn=true and grd.inventory.newInv=false";
    	    List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{productid, endDate});
    	    return new KwlReturnObject(true, "Rate and Quantity for the product", null, list, list.size());
    	}catch(Exception ex){
    		System.out.print(ex);
    		throw ServiceException.FAILURE(ex.getMessage(), ex);
    	}
    }

    public KwlReturnObject getGoodsReceipt_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from GoodsReceiptDetail grd where inventory.product.ID=? and grd.company.companyID=? and grd.goodsReceipt.deleted=false";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getGoodsReceipt_Rate(String inventoryid) throws ServiceException {
        List list = new ArrayList();
        String q = "select rate from GoodsReceiptDetail grd where grd.inventory.ID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{inventoryid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getGR_ProductTaxPercent(String inventoryid) throws ServiceException {
        List list = new ArrayList();
        String q = "select percent from TaxList where tax.ID in (select tax from GoodsReceiptDetail where inventory.ID=?)";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{inventoryid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
}
