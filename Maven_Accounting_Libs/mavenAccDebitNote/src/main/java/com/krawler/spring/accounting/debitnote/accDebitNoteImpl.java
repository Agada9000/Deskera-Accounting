/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.debitnote;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.BillingDebitNote;
import com.krawler.hql.accounting.BillingDebitNoteDetail;
import com.krawler.hql.accounting.DebitNote;
import com.krawler.hql.accounting.DebitNoteDetail;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.common.KwlReturnObject;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accDebitNoteImpl implements accDebitNoteDAO {
    private HibernateTemplate hibernateTemplate;
    public void setSessionFactory(SessionFactory sessionFactory){
        this.hibernateTemplate = new HibernateTemplate(sessionFactory);
    }

    public KwlReturnObject addDebitNote(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            DebitNote dn = new DebitNote();
            dn.setDeleted(false);
            if (hm.containsKey("entrynumber")) {
                dn.setDebitNoteNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                dn.setCurrency(currency);
            }
            if (hm.containsKey("autogenerated")) {
                dn.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                dn.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("sequence")) {
                dn.setSequence((Integer) hm.get("sequence"));
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                dn.setCompany(company);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                dn.setJournalEntry(je);
            }
            if (hm.containsKey("dndetails")) {
                dn.setRows((Set<DebitNoteDetail>) hm.get("dndetails"));
            }
            hibernateTemplate.saveOrUpdate(dn);
            list.add(dn);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteImpl.addDebitNote : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Debit Note has been added successfully", null, list, list.size());
    }

    public KwlReturnObject updateDebitNote(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            String dnid = (String) hm.get("dnid");
            DebitNote dn = (DebitNote) hibernateTemplate.get(DebitNote.class, dnid);
            if(dn != null) {
                if (hm.containsKey("entrynumber")) {
                    dn.setDebitNoteNumber((String) hm.get("entrynumber"));
                }
                if (hm.containsKey("currencyid")) {
                    KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                    dn.setCurrency(currency);
                }
                if (hm.containsKey("autogenerated")) {
                    dn.setAutoGenerated((Boolean) hm.get("autogenerated"));
                }
                if (hm.containsKey("memo")) {
                    dn.setMemo((String) hm.get("memo"));
                }
                if (hm.containsKey("sequence")) {
                    dn.setSequence((Integer) hm.get("sequence"));
                }
                if (hm.containsKey("companyid")) {
                    Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                    dn.setCompany(company);
                }
                if (hm.containsKey("journalentryid")) {
                    JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                    dn.setJournalEntry(je);
                }
                if (hm.containsKey("dndetails")) {
                    dn.setRows((Set<DebitNoteDetail>) hm.get("dndetails"));
                }
                hibernateTemplate.saveOrUpdate(dn);
            }
            list.add(dn);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteImpl.updateDebitNote : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Debit Note has been updated successfully", null, list, list.size());
    }

        public KwlReturnObject saveBillingDebitNote(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try{
            BillingDebitNote dn = null;
            String dnid = (String) hm.get("bdnid");
            if(StringUtil.isNullOrEmpty(dnid)){
                dn = new BillingDebitNote();
            }else{
                dn = (BillingDebitNote) hibernateTemplate.get(BillingDebitNote.class, dnid);
            }
            dn.setDeleted(false);
            if (hm.containsKey("entrynumber")) {
                dn.setDebitNoteNumber((String) hm.get("entrynumber"));
            }
            if (hm.containsKey("currencyid")) {
                KWLCurrency currency = hm.get("currencyid")==null?null:(KWLCurrency) hibernateTemplate.get(KWLCurrency.class, (String)hm.get("currencyid"));
                dn.setCurrency(currency);
            }
            if (hm.containsKey("autogenerated")) {
                dn.setAutoGenerated((Boolean) hm.get("autogenerated"));
            }
            if (hm.containsKey("memo")) {
                dn.setMemo((String) hm.get("memo"));
            }
            if (hm.containsKey("sequence")) {
                dn.setSequence((Integer) hm.get("sequence"));
            }
            if (hm.containsKey("companyid")) {
                Company company = hm.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) hm.get("companyid"));
                dn.setCompany(company);
            }
            if (hm.containsKey("journalentryid")) {
                JournalEntry je = hm.get("journalentryid")==null?null:(JournalEntry) hibernateTemplate.get(JournalEntry.class, (String) hm.get("journalentryid"));
                dn.setJournalEntry(je);
            }
            if (hm.containsKey("bdndetails")) {
                dn.setRows((Set<BillingDebitNoteDetail>) hm.get("bdndetails"));
            }
            hibernateTemplate.saveOrUpdate(dn);
            list.add(dn);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteImpl.addDebitNote : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Debit Note has been added successfully", null, list, list.size());
    }

    public KwlReturnObject getDebitNotes(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String companyid = (String) request.get(Constants.companyKey);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add(companyid);
            String condition = " where ac.ID=v.account.ID and dn.deleted=false and dn.company.companyID=?";
            if (StringUtil.isNullOrEmpty(ss) == false) {
            for(int i=0;i<=3;i++){
                    params.add(ss + "%");
                }
                 condition += " and ( dn.debitNoteNumber like ? or v.name like ?  or dn.memo like ? or dn.journalEntry.entryNumber like ?) ";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and dn.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (dn.journalEntry.entryDate >=? and dn.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "select dn, v, jed from DebitNote dn inner join dn.journalEntry je inner join je.details jed inner join jed.account ac, Vendor v" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteImpl.getDebitNotes : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getBillingDebitNotes(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String companyid = (String) request.get(Constants.companyKey);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add(companyid);
            String condition = " where ac.ID=v.account.ID and dn.deleted=false and dn.company.companyID=?";
            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i <= 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and ( dn.debitNoteNumber like ? or v.name like ?  or dn.memo like ? or dn.journalEntry.entryNumber like ?) ";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and dn.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (dn.journalEntry.entryDate >=? and dn.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "select dn, v, jed from BillingDebitNote dn inner join dn.journalEntry je inner join je.details jed inner join jed.account ac, Vendor v" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteImpl.getBillingDebitNotes : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getDNFromNoteNo(String noteno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from DebitNote where debitNoteNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{noteno, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getBDNFromNoteNo(String noteno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from BillingDebitNote where debitNoteNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{noteno, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getDNSequenceNo(String companyid, Date applydate) throws ServiceException {
        List list = new ArrayList();
        String query = "select count(dn.ID) from DebitNote dn inner join dn.journalEntry je  where dn.company.companyID=? and je.entryDate<=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{companyid, applydate});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getBDNSequenceNo(String companyid, Date applydate) throws ServiceException {
        List list = new ArrayList();
        String query = "select count(dn.ID) from BillingDebitNote dn inner join dn.journalEntry je  where dn.company.companyID=? and je.entryDate<=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{companyid, applydate});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getDNFromGReceipt(String receiptid) throws ServiceException {
        List list = new ArrayList();
        String query = "select dn, dnr, dnd from DebitNote dn left join dn.rows dnr left join dn.discounts dnd" +
                " where dn.deleted=false and (dnr.goodsReceiptRow.goodsReceipt.ID=? or dnd.goodsReceipt.ID=?) order by dn.sequence";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid, receiptid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getDNDetailsFromGReceipt(String receiptid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from DebitNoteDetail dn  where dn.goodsReceiptRow.goodsReceipt.ID=? and dn.debitNote.deleted=false and dn.company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getDebitNoteDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from DebitNoteDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingDebitNoteDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingDebitNoteDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getDNFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from DebitNote where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getJEFromDN(String dnid) throws ServiceException {
        String selQuery = "select dn.journalEntry.ID from DebitNote dn where dn.ID=? and dn.company.companyID=dn.journalEntry.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{dnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getJEFromBDN(String dnid, String companyid) throws ServiceException {
        String selQuery = "from BillingDebitNote dn where dn.ID = ? and dn.company.companyID = ?";
//        String selQuery = "select dn.journalEntry.ID from DebitNote dn where dn.ID=? and dn.company.companyID=dn.journalEntry.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{dnid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getDNDFromDN(String dnid) throws ServiceException {
        String selQuery = "select dnd.discount.ID from DebitNoteDiscount dnd where dnd.debitNote.ID=? and dnd.company.companyID=dnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{dnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDNDFromBDN(String dnid, String companyid) throws ServiceException {
        String selQuery = "from BillingDebitNoteDiscount dnd where dnd.debitNote.ID = ? and dnd.company.companyID = ?";
//        String selQuery = "select dnd.discount.ID from DebitNoteDiscount dnd where dnd.debitNote.ID=? and dnd.company.companyID=dnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{dnid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDNDIFromDN(String dnid) throws ServiceException {
        String selQuery = "select dnd.discount.ID from DebitNoteDetail dnd where dnd.debitNote.ID=? and dnd.company.companyID=dnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{dnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDNDFromBDND(String bdnid, String companyid) throws ServiceException {
        String selQuery = "from BillingDebitNoteDetail dnd where dnd.debitNote.ID = ? and dnd.company.companyID = ?";
//        String selQuery = "select dnd.discount.ID from DebitNoteDetail dnd where dnd.debitNote.ID=? and dnd.company.companyID=dnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{bdnid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDNDInvFromDN(String dnid) throws ServiceException {
        String selQuery = "select dnd.inventory.ID from DebitNoteDetail dnd where dnd.debitNote.ID=? and dnd.company.companyID=dnd.discount.company.companyID";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{dnid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject deleteDebitNote(String dnid, String companyid) throws ServiceException {
        String query = "update DebitNote set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{dnid, companyid});
        return new KwlReturnObject(true, "Debit Note has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteBillingDebitNote(String bdnid, String companyid) throws ServiceException {
        String query = "update BillingDebitNote set deleted=true where ID = ? and company.companyID=?";
//        String query = "update DebitNote set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{bdnid, companyid});
        return new KwlReturnObject(true, "Debit Note has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getDNRFromBDN(String receiptid) throws ServiceException {
        String selQuery = "select dn, dnr, dnd from BillingDebitNote dn left join dn.rows dnr left join dn.discounts dnd where dn.deleted=false and (dnr.goodsReceiptRow.billingGoodsReceipt.ID=? or dnd.goodsReceipt.ID=?) order by dn.sequence";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{receiptid, receiptid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBDNDetailsFromGReceipt(String receiptid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "from BillingDebitNoteDetail dn  where dn.goodsReceiptRow.billingGoodsReceipt.ID = ?  and dn.debitNote.deleted=false and dn.company.companyID=?";
        //String query = "from DebitNoteDetail dn  where dn.goodsReceiptRow.goodsReceipt.ID=? and dn.debitNote.deleted=false and dn.company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{receiptid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject getTotalDiscount(String receiptid) throws ServiceException {
        String selQuery = "select sum(discount) from Discount where ID in (select discount from DebitNoteDetail where goodsReceiptRow.ID =?) and deleted=false";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{receiptid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getTotalQty(String invId) throws ServiceException {
        String selQuery = "select sum(quantity) from DebitNoteDetail where goodsReceiptRow.ID=? and discount.deleted=false";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{invId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

}
