/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.invoice;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.KWLCurrency;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.BillingInvoice;
import com.krawler.hql.accounting.BillingInvoiceDetail; 
import com.krawler.hql.accounting.CompanyAccountPreferences;
import com.krawler.hql.accounting.Customer;
import com.krawler.hql.accounting.Discount;
import com.krawler.hql.accounting.ExchangeRateDetails;
import com.krawler.hql.accounting.Invoice;
import com.krawler.hql.accounting.InvoiceDetail;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.hql.accounting.JournalEntryDetail;
import com.krawler.hql.accounting.RepeatedInvoices;
import com.krawler.hql.accounting.Tax;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accInvoiceImpl implements accInvoiceDAO {
    private HibernateTemplate hibernateTemplate;
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.hibernateTemplate = new HibernateTemplate(sessionFactory);
	}

//    public KwlReturnObject getInvoiceObj(String invoiceid) {
//        List list = new ArrayList();
//        Invoice invoice = (Invoice) hibernateTemplate.get(Invoice.class, invoiceid);
//        list.add(invoice);
//        return new KwlReturnObject(true, null, null, list, list.size());
//    }

    public KwlReturnObject getInvoiceCount(String invoiceno, String companyid) throws ServiceException{
        List list = new ArrayList();
        String q = "from Invoice where invoiceNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{invoiceno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject addInvoice(JSONObject json, HashSet details) throws ServiceException {
        List list = new ArrayList();
        Invoice invoice=new Invoice();
        invoice.setDeleted(false);
        try{
            if (json.has("invoiceid")) {
                 if(!StringUtil.isNullOrEmpty(json.getString("invoiceid")))
                invoice = (Invoice) hibernateTemplate.get(Invoice.class, json.getString("invoiceid"));
            }
            if(json.has("entrynumber")){
                invoice.setInvoiceNumber(json.getString("entrynumber"));
            }
            if(json.has("autogenerated")){
                invoice.setAutoGenerated(json.getBoolean("autogenerated"));
            }
            if(json.has("memo")){
                invoice.setMemo(json.getString("memo"));
            }
            if(json.has("billto")){
                invoice.setBillTo(json.getString("billto"));
            }
            if(json.has("shipaddress")){
                invoice.setShipTo(json.getString("shipaddress"));
            }
            if(json.has("shipdate")){
                invoice.setShipDate((Date) json.get("shipdate"));
            }
            if(json.has("duedate")){
                invoice.setDueDate((Date) json.get("duedate"));
            }
            if(json.has("companyid")){
                invoice.setCompany((Company) hibernateTemplate.get(Company.class, json.getString("companyid")));
            }
            if(json.has("currencyid")){
                invoice.setCurrency((KWLCurrency) hibernateTemplate.get(KWLCurrency.class, json.getString("currencyid")));
            }
            if(json.has("discountid")){
                invoice.setDiscount((Discount) hibernateTemplate.get(Discount.class, json.getString("discountid")));
            }
            if(json.has("customerentryid")){
                invoice.setCustomerEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("customerentryid")));
            }
            if(json.has("shipentryid")){
                invoice.setShipEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("shipentryid")));
            }
            if(json.has("otherentryid")){
                invoice.setOtherEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("otherentryid")));
            }
            if(json.has("taxentryid")){
                invoice.setTaxEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("taxentryid")));
            }
            if(json.has("taxid")){
                invoice.setTax((Tax) hibernateTemplate.get(Tax.class, json.getString("taxid")));
            }
            if(json.has("journalerentryid")){
                invoice.setJournalEntry((JournalEntry) hibernateTemplate.get(JournalEntry.class, json.getString("journalerentryid")));
            }
            if(json.has("erdid")){
                invoice.setExchangeRateDetail((ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, json.getString("erdid")));
            }
            if(json.has("externalCurrencyRate")){
                invoice.setExternalCurrencyRate((Double)json.get("externalCurrencyRate"));
            }
            if(json.has("customerid")){
                invoice.setCustomer((Customer) hibernateTemplate.get(Customer.class, json.getString("customerid")));
            }
            if(json.has("repeateid")){
                invoice.setRepeateInvoice((RepeatedInvoices) hibernateTemplate.get(RepeatedInvoices.class, json.getString("repeateid")));
            }
            if(json.has("parentid")){
                invoice.setParentInvoice((Invoice) hibernateTemplate.get(Invoice.class, json.getString("parentid")));
            }
            if(json.has("porefno")){
                invoice.setPoRefNumber(json.getString("porefno"));
            }
            if(!details.isEmpty()){
                invoice.setRows(details);
            }
            hibernateTemplate.save(invoice);
            list.add(invoice);
        } catch(JSONException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.addInvoice:"+ex, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

  public KwlReturnObject updateInvoice(JSONObject json, HashSet details) throws ServiceException {
        List list = new ArrayList();
        try{
            String invoiceid = json.getString("invoiceid");
            Invoice invoice = (Invoice) hibernateTemplate.get(Invoice.class, invoiceid);
            if(invoice != null){
                if(json.has("entrynumber")){
                    invoice.setInvoiceNumber(json.getString("entrynumber"));
                }
                if(json.has("autogenerated")){
                    invoice.setAutoGenerated(json.getBoolean("autogenerated"));
                }
                if(json.has("memo")){
                    invoice.setMemo(json.getString("memo"));
                }
                if(json.has("billto")){
                    invoice.setBillTo(json.getString("billto"));
                }
                if(json.has("shipaddress")){
                    invoice.setShipTo(json.getString("shipaddress"));
                }
                if(json.has("shipdate")){
                    invoice.setShipDate((Date) json.get("shipdate"));
                }
                if(json.has("duedate")){
                    invoice.setDueDate((Date) json.get("duedate"));
                }
                if(json.has("companyid")){
                    invoice.setCompany((Company) hibernateTemplate.get(Company.class, json.getString("companyid")));
                }
                if(json.has("currencyid")){
                    invoice.setCurrency((KWLCurrency) hibernateTemplate.get(KWLCurrency.class, json.getString("currencyid")));
                }
                if(json.has("discountid")){
                    invoice.setDiscount((Discount) hibernateTemplate.get(Discount.class, json.getString("discountid")));
                }
                if(json.has("customerentryid")){
                    invoice.setCustomerEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("customerentryid")));
                }
                if(json.has("shipentryid")){
                    invoice.setShipEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("shipentryid")));
                }
                if(json.has("otherentryid")){
                    invoice.setOtherEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("otherentryid")));
                }
                if(json.has("taxentryid")){
                    invoice.setTaxEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("taxentryid")));
                }
                if(json.has("taxid")){
                    invoice.setTax((Tax) hibernateTemplate.get(Tax.class, json.getString("taxid")));
                }
                if(json.has("journalerentryid")){
                    invoice.setJournalEntry((JournalEntry) hibernateTemplate.get(JournalEntry.class, json.getString("journalerentryid")));
                }
                if(json.has("erdid")){
                    invoice.setExchangeRateDetail((ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, json.getString("erdid")));
                }
                if(json.has("externalCurrencyRate")){
                    invoice.setExternalCurrencyRate((Double)json.get("externalCurrencyRate"));
                }
                if(json.has("customerid")){
                    invoice.setCustomer((Customer) hibernateTemplate.get(Customer.class, json.getString("customerid")));
                }
                if(json.has("repeateid")){
                    invoice.setRepeateInvoice((RepeatedInvoices) hibernateTemplate.get(RepeatedInvoices.class, json.getString("repeateid")));
                }
                if(json.has("parentid")){
                    invoice.setParentInvoice((Invoice) hibernateTemplate.get(Invoice.class, json.getString("parentid")));
                }
                if(json.has("porefno")){
                invoice.setPoRefNumber(json.getString("porefno"));
                }
                if(details != null){
                    if(!details.isEmpty()){
                        invoice.setRows(details);
                    }
                }

                hibernateTemplate.saveOrUpdate(invoice);
            }
            list.add(invoice);
        } catch(JSONException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoice:"+ex, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

  public KwlReturnObject saveInvoice(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            Invoice invoice = new Invoice();
            if (dataMap.containsKey("invoiceid")) {
                invoice = (Invoice) hibernateTemplate.get(Invoice.class, (String)dataMap.get("invoiceid"));
            }

            if (dataMap.containsKey("otherentryid")) {
                JournalEntryDetail jed = dataMap.get("otherentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("otherentryid"));
                invoice.setOtherEntry(jed);
            }
            if (dataMap.containsKey("shipentryid")) {
                JournalEntryDetail jed = dataMap.get("shipentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("shipentryid"));
                invoice.setShipEntry(jed);
            }
            if (dataMap.containsKey("taxentryid")) {
                JournalEntryDetail jed = dataMap.get("taxentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("taxentryid"));
                invoice.setTaxEntry(jed);
            }
            if (dataMap.containsKey("customerentryid")) {
                JournalEntryDetail jed = dataMap.get("customerentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("customerentryid"));
                invoice.setCustomerEntry(jed);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String)dataMap.get("taxid"));
                invoice.setTax(tax);
            }
            if (dataMap.containsKey("autogenerated")) {
                invoice.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("memo")) {
                invoice.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                invoice.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company)hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                invoice.setCompany(company);
            }
            if (dataMap.containsKey("currencyid")) {
                KWLCurrency currency = dataMap.get("currencyid")==null?null:(KWLCurrency)hibernateTemplate.get(KWLCurrency.class, (String) dataMap.get("currencyid"));
                invoice.setCurrency(currency);
            }
            if(dataMap.containsKey("customerid")){
                invoice.setCustomer((Customer) hibernateTemplate.get(Customer.class, (String) dataMap.get("customerid")));
            }
            
            if(dataMap.containsKey("repeateid")){
                RepeatedInvoices rpt= dataMap.get("repeateid")==null?null:(RepeatedInvoices) hibernateTemplate.get(RepeatedInvoices.class, (String) dataMap.get("repeateid"));
                invoice.setRepeateInvoice(rpt);
            }
            if(dataMap.containsKey("parentid")){
                Invoice pInvoice = dataMap.get("parentid")==null?null:(Invoice) hibernateTemplate.get(Invoice.class, (String) dataMap.get("parentid"));
                invoice.setParentInvoice(pInvoice);
            }

            if (dataMap.containsKey("details")) {
                invoice.setRows((Set<InvoiceDetail>)dataMap.get("details"));
            }
            if(dataMap.containsKey("porefno")){
                invoice.setPoRefNumber((String)dataMap.get("porefno"));
            }
            hibernateTemplate.save(invoice);
            list.add(invoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject deleteInvoice(String invoiceid, String companyid) throws ServiceException {
        //Delete Invoice Details
//        deleteInvoiceDtails(invoiceid, companyid);

        //Delete Invoice
        String delQuery = "delete from Invoice inv where ID=? and inv.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{invoiceid, companyid});

        return new KwlReturnObject(true, "Invoice has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteInvoiceEntry(String invoiceid, String companyid) throws ServiceException {
        String query = "update Invoice inv set inv.deleted=true where inv.ID=? and inv.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "Invoice has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getCalculatedInvTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        String taxid = (String) requestParams.get("taxid");
        String query = "from Invoice inv where inv.tax.ID = ? and inv.deleted=false";
        returnlist = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{taxid});
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    public KwlReturnObject getCalculatedInvDtlTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        String taxid = (String) requestParams.get("taxid");
        String query = "from InvoiceDetail inv where inv.tax.ID = ? and inv.invoice.deleted=false";
        returnlist = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{taxid});
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    public KwlReturnObject getJEFromInvoice(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select inv.journalEntry.ID from Invoice inv where inv.ID=? and inv.company.companyID=inv.journalEntry.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceDiscount(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select inv.discount.ID from Invoice inv where inv.ID=? and inv.company.companyID=inv.discount.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from InvoiceDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingInvoiceDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingInvoiceDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getInvoiceDetailsDiscount(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.discount.ID from InvoiceDetail invd where invd.invoice.ID=? and invd.company.companyID=invd.discount.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    public KwlReturnObject getBillingInvoiceDetailsDiscount(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.discount.ID from BillingInvoiceDetail invd where invd.billingInvoice.ID=? and invd.company.companyID=invd.discount.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceInventory(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.inventory.ID from InvoiceDetail invd where invd.invoice.ID=? and invd.company.companyID=invd.inventory.company.companyID";
        list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject deleteInvoiceDtails(String invoiceid, String companyid) throws ServiceException {
        Invoice invoice = (Invoice) hibernateTemplate.get(Invoice.class, invoiceid);
        Iterator itr = invoice.getRows().iterator();
        int numRows = 0;
        while (itr.hasNext()) {
            InvoiceDetail row = (InvoiceDetail) itr.next();
            String delQuery = "delete from InvoiceDetail where ID=? and company.companyID=?";
            numRows += HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{row.getID(), companyid});
        }

        return new KwlReturnObject(true, "Invoice details has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getInvoices(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) hibernateTemplate.get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
//            String cashAccount=((CompanyAccountPreferences) session.get(CompanyAccountPreferences.class, AuthHandler.getCompanyid(request))).getCashAccount().getID();
            String cashAccount = pref.getCashAccount().getID();
            boolean cashonly = false;
            boolean creditonly = false;
            boolean personGroup = false;
            boolean isagedgraph = false;
            String group = "";
            cashonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.cashonly));
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));
            boolean deleted =Boolean.parseBoolean((String) request.get(InvoiceConstants.deleted));
            boolean nondeleted =Boolean.parseBoolean((String) request.get(InvoiceConstants.nondeleted));

            if (cashonly) {
                customerid = cashAccount;
            }
//            boolean ignoreZero = (String) request.get("ignorezero") != null;
            personGroup = Boolean.parseBoolean((String) request.get(InvoiceConstants.persongroup));
            isagedgraph = Boolean.parseBoolean((String) request.get(InvoiceConstants.isagedgraph));
            String dueDate = (String) request.get(InvoiceConstants.curdate);
            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);

            if(request.containsKey(InvoiceConstants.getRepeateInvoice)){
                if(Boolean.parseBoolean((String) request.get(InvoiceConstants.getRepeateInvoice))){
                    condition += " and repeateInvoice is not null";
                }
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                condition += " and inv.ID=?";
            } else {
                if (!StringUtil.isNullOrEmpty(customerid)) {
                    params.add(customerid);
                    condition += " and inv.customerEntry.account.ID=?";
                } else {
                    String q = "select ID from Customer where company.companyID=?";
                    Iterator itrcust = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{companyid}).iterator();
                    String qMarks = "";
                    if (!creditonly) {
                        qMarks = "?,";
                        params.add(cashAccount);
                    }
                    while (itrcust.hasNext()) {
                        qMarks += "?,";
                        params.add(itrcust.next());
                    }
                    qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
                    if (!StringUtil.isNullOrEmpty(qMarks)) {
                        condition += " and inv.customerEntry.account.ID in (" + qMarks + ")";
                    }
                }
            }

            if (!StringUtil.isNullOrEmpty(dueDate)) {
                params.add(df.parse(dueDate));
                condition += " and inv.dueDate<=?";
            }
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and inv.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i <= 4; i++) {
                    params.add(ss + "%");
                }
                condition += " and (inv.invoiceNumber like ? or inv.billTo like ?  or inv.journalEntry.entryNumber like ? or inv.memo like ? or inv.customerEntry.account.name like ? ) ";
            }

            if (personGroup) {
                params.add(startFinYearCal.getTime());
                params.add(endFinYearCal.getTime());
                condition += " and inv.dueDate>=? and inv.dueDate<=?";
            }

            if (isagedgraph) {
                params.add(startFinYearCal.getTime());
                params.add(endFinYearCal.getTime());
                condition += " and inv.dueDate>=? and inv.dueDate<=?";
            }
            if (nondeleted)
                condition += " and inv.deleted=false ";
            else if (deleted)
                condition += " and inv.deleted=true ";
            String query = "from Invoice inv where inv.company.companyID=? " + condition + group + " order by customerEntry.account.id";
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getBillingInvoices(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) hibernateTemplate.get(CompanyAccountPreferences.class, companyid);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
            String cashAccount = pref.getCashAccount().getID();
            boolean cashonly = false;
            boolean creditonly = false;
            cashonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.cashonly));
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));
            boolean deleted =Boolean.parseBoolean((String)request.get(InvoiceConstants.deleted));
            boolean nondeleted =Boolean.parseBoolean((String)request.get(InvoiceConstants.nondeleted));
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (cashonly) {
                customerid = cashAccount;
            }
//            boolean ignoreZero = (String) request.get("ignorezero") != null;
            String dueDate = (String) request.get(InvoiceConstants.curdate);
            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);

            if(request.containsKey(InvoiceConstants.getRepeateInvoice)){
                if(Boolean.parseBoolean((String) request.get(InvoiceConstants.getRepeateInvoice))){
                    condition += " and repeateInvoice is not null";
                }
            }
            
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                condition += " and inv.ID=?";
            } else {
                if (!StringUtil.isNullOrEmpty(customerid)) {
                    params.add(customerid);
                    condition += " and inv.customerEntry.account.ID=?";
                } else {
                    String q = "select ID from Customer where company.companyID=?";
                    Iterator itrcust = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{companyid}).iterator();
                    String qMarks = "";
                    if (!creditonly) {
                        qMarks = "?,";
                        params.add(cashAccount);
                    }
                    while (itrcust.hasNext()) {
                        qMarks += "?,";
                        params.add(itrcust.next());
                    }
                    qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
                    if (!StringUtil.isNullOrEmpty(qMarks)) {
                        condition += " and inv.customerEntry.account.ID in (" + qMarks + ")";
                    }
                }
            }

            if (!StringUtil.isNullOrEmpty(dueDate)) {
                params.add(df.parse(dueDate));
                condition += " and inv.dueDate<=?";
            }

            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and inv.journalEntry.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            
            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i <= 4; i++) {
                    params.add(ss + "%");
                }
                condition += " and (inv.billingInvoiceNumber like ? or inv.billTo like ?  or inv.journalEntry.entryNumber like ? or inv.memo like ? or inv.customerEntry.account.name like ? ) ";
            }
            if (nondeleted)
                condition += " and inv.deleted=false ";
            else if (deleted)
                condition += " and inv.deleted=true ";
            String query = "from BillingInvoice inv where inv.company.companyID=? " + condition + " order by inv.ID";
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getBillingInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getBillingInvoiceCount(String invoiceno, String companyid) throws ServiceException{
        List list = new ArrayList();
        int count = 0;
        String q = "from BillingInvoice where billingInvoiceNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{invoiceno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject addBillingInvoice(JSONObject json, HashSet details) throws ServiceException {
        List list = new ArrayList();
        BillingInvoice invoice = new BillingInvoice();
        invoice.setDeleted(false);
        try{            
            if (json.has("invoiceid")) {
                if(!StringUtil.isNullOrEmpty(json.getString("invoiceid")))
                    invoice = (BillingInvoice) hibernateTemplate.get(BillingInvoice.class, json.getString("invoiceid"));
            }
            if(json.has("entrynumber")){
                invoice.setBillingInvoiceNumber(json.getString("entrynumber"));
            }
            if(json.has("autogenerated")){
                invoice.setAutoGenerated(json.getBoolean("autogenerated"));
            }
            if(json.has("memo")){
                invoice.setMemo(json.getString("memo"));
            }
            if(json.has("billto")){
                invoice.setBillTo(json.getString("billto"));
            }
            if(json.has("shipaddress")){
                invoice.setShipTo(json.getString("shipaddress"));
            }
            if(json.has("shipdate")){
                invoice.setShipDate((Date) json.get("shipdate"));
            }
            if(json.has("duedate")){
                invoice.setDueDate((Date) json.get("duedate"));
            }
            if(json.has("companyid")){
                invoice.setCompany((Company) hibernateTemplate.get(Company.class, json.getString("companyid")));
            }
            if(json.has("currencyid")){
                invoice.setCurrency((KWLCurrency) hibernateTemplate.get(KWLCurrency.class, json.getString("currencyid")));
            }
            if(json.has("discountid")){
                invoice.setDiscount((Discount) hibernateTemplate.get(Discount.class, json.getString("discountid")));
            }
            if(json.has("creditorentryid")){
                invoice.setCreditorEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("creditorentryid")));
            }
            if(json.has("customerentryid")){
                invoice.setCustomerEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("customerentryid")));
            }
            if(json.has("shipentryid")){
                invoice.setShipEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("shipentryid")));
            }
            if(json.has("otherentryid")){
                invoice.setOtherEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("otherentryid")));
            }
            if(json.has("taxentryid")){
                invoice.setTaxEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("taxentryid")));
            }
            if(json.has("taxid")){
                invoice.setTax((Tax) hibernateTemplate.get(Tax.class, json.getString("taxid")));
            }
            if(json.has("journalerentryid")){
                invoice.setJournalEntry((JournalEntry) hibernateTemplate.get(JournalEntry.class, json.getString("journalerentryid")));
            }
            if(json.has("erdid")){
                invoice.setExchangeRateDetail((ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, json.getString("erdid")));
            }
            if(json.has("customerid")){
                    invoice.setCustomer((Customer) hibernateTemplate.get(Customer.class, json.getString("customerid")));
            }
            if(json.has("repeateid")){
                invoice.setRepeateInvoice((RepeatedInvoices) hibernateTemplate.get(RepeatedInvoices.class, json.getString("repeateid")));
            }
            if(json.has("parentid")){
                invoice.setParentInvoice((BillingInvoice) hibernateTemplate.get(BillingInvoice.class, json.getString("parentid")));
            }
            if(json.has("porefno")){
                invoice.setPoRefNumber(json.getString("porefno"));
            }
            if(!details.isEmpty()){
                invoice.setRows(details);
            }
            hibernateTemplate.save(invoice);
            list.add(invoice);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.addInvoice: "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject updateBillingInvoice(JSONObject json, HashSet details) throws ServiceException {
        List list = new ArrayList();
        try{
            String invoiceid = json.getString("invoiceid");
            BillingInvoice invoice = (BillingInvoice) hibernateTemplate.get(BillingInvoice.class, invoiceid);
            if(invoice != null){
                if(json.has("entrynumber")){
                    invoice.setBillingInvoiceNumber(json.getString("entrynumber"));
                }
                if(json.has("autogenerated")){
                    invoice.setAutoGenerated(json.getBoolean("autogenerated"));
                }
                if(json.has("memo")){
                    invoice.setMemo(json.getString("memo"));
                }
                if(json.has("billto")){
                    invoice.setBillTo(json.getString("billto"));
                }
                if(json.has("shipaddress")){
                    invoice.setShipTo(json.getString("shipaddress"));
                }
                if(json.has("shipdate")){
                    invoice.setShipDate((Date) json.get("shipdate"));
                }
                if(json.has("duedate")){
                    invoice.setDueDate((Date) json.get("duedate"));
                }
                if(json.has("companyid")){
                    invoice.setCompany((Company) hibernateTemplate.get(Company.class, json.getString("companyid")));
                }
                if(json.has("currencyid")){
                    invoice.setCurrency((KWLCurrency) hibernateTemplate.get(KWLCurrency.class, json.getString("currencyid")));
                }
                if(json.has("discountid")){
                    invoice.setDiscount((Discount) hibernateTemplate.get(Discount.class, json.getString("discountid")));
                }
                if(json.has("creditorentryid")){
                    invoice.setCreditorEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("creditorentryid")));
                }
                if(json.has("customerentryid")){
                    invoice.setCustomerEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("customerentryid")));
                }
                if(json.has("shipentryid")){
                    invoice.setShipEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("shipentryid")));
                }
                if(json.has("otherentryid")){
                    invoice.setOtherEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("otherentryid")));
                }
                if(json.has("taxentryid")){
                    invoice.setTaxEntry((JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, json.getString("taxentryid")));
                }
                if(json.has("taxid")){
                    invoice.setTax((Tax) hibernateTemplate.get(Tax.class, json.getString("taxid")));
                }
                if(json.has("journalerentryid")){
                    invoice.setJournalEntry((JournalEntry) hibernateTemplate.get(JournalEntry.class, json.getString("journalerentryid")));
                }
                if(json.has("erdid")){
                    invoice.setExchangeRateDetail((ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, json.getString("erdid")));
                }
                if(json.has("customerid")){
                    invoice.setCustomer((Customer) hibernateTemplate.get(Customer.class, json.getString("customerid")));
                }
                if(json.has("repeateid")){
                    invoice.setRepeateInvoice((RepeatedInvoices) hibernateTemplate.get(RepeatedInvoices.class, json.getString("repeateid")));
                }
                if(json.has("parentid")){
                    invoice.setParentInvoice((BillingInvoice) hibernateTemplate.get(BillingInvoice.class, json.getString("parentid")));
                }
                if(json.has("porefno")){
                    invoice.setPoRefNumber(json.getString("porefno"));
                }
                if(details != null){
                    if(!details.isEmpty()){
                        invoice.setRows(details);
                    }
                }
                hibernateTemplate.save(invoice);
            }
            list.add(invoice);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoice: "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

     public KwlReturnObject saveBillingInvoice(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            BillingInvoice invoice = new BillingInvoice();
            if (dataMap.containsKey("invoiceid")) {
                invoice = (BillingInvoice) hibernateTemplate.get(BillingInvoice.class, (String)dataMap.get("invoiceid"));
            }
            if (dataMap.containsKey("entrynumber")) {
                invoice.setMemo((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("billto")) {
                invoice.setMemo((String) dataMap.get("billto"));
            }
            if (dataMap.containsKey("shipaddress")) {
                invoice.setMemo((String) dataMap.get("shipaddress"));
            }
            if(dataMap.containsKey("shipdate")){
                invoice.setShipDate((Date) dataMap.get("shipdate"));
            }
            if(dataMap.containsKey("duedate")){
                invoice.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("discountid")) {
                Discount discount = dataMap.get("discountid")==null?null:(Discount) hibernateTemplate.get(Discount.class, (String)dataMap.get("discountid"));
                invoice.setDiscount(discount);
            }
            if (dataMap.containsKey("creditorentryid")) {
                JournalEntryDetail jed = dataMap.get("creditorentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("creditorentryid"));
                invoice.setCreditorEntry(jed);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String)dataMap.get("taxid"));
                invoice.setTax(tax);
            }
            if(dataMap.containsKey("journalerentryid")){
                invoice.setJournalEntry((JournalEntry) hibernateTemplate.get(JournalEntry.class, (String)dataMap.get("journalerentryid")));
            }
            if(dataMap.containsKey("erdid")){
                invoice.setExchangeRateDetail((ExchangeRateDetails) hibernateTemplate.get(ExchangeRateDetails.class, (String)dataMap.get("erdid")));
            }
            if (dataMap.containsKey("otherentryid")) {
                JournalEntryDetail jed = dataMap.get("otherentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("otherentryid"));
                invoice.setOtherEntry(jed);
            }
            if (dataMap.containsKey("shipentryid")) {
                JournalEntryDetail jed = dataMap.get("shipentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("shipentryid"));
                invoice.setShipEntry(jed);
            }
            if (dataMap.containsKey("taxentryid")) {
                JournalEntryDetail jed = dataMap.get("taxentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("taxentryid"));
                invoice.setTaxEntry(jed);
            }
            if (dataMap.containsKey("customerentryid")) {
                JournalEntryDetail jed = dataMap.get("customerentryid")==null?null:(JournalEntryDetail) hibernateTemplate.get(JournalEntryDetail.class, (String)dataMap.get("customerentryid"));
                invoice.setCustomerEntry(jed);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String)dataMap.get("taxid"));
                invoice.setTax(tax);
            }
            if (dataMap.containsKey("autogenerated")) {
                invoice.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("memo")) {
                invoice.setMemo((String) dataMap.get("memo"));
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company)hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                invoice.setCompany(company);
            }
            if (dataMap.containsKey("currencyid")) {
                KWLCurrency currency = dataMap.get("currencyid")==null?null:(KWLCurrency)hibernateTemplate.get(KWLCurrency.class, (String) dataMap.get("currencyid"));
                invoice.setCurrency(currency);
            }
            if(dataMap.containsKey("customerid")){
                    invoice.setCustomer((Customer) hibernateTemplate.get(Customer.class, (String) dataMap.get("customerid")));
            }
            if (dataMap.containsKey("details")) {
                invoice.setRows((Set<BillingInvoiceDetail>)dataMap.get("details"));
            }
            if(dataMap.containsKey("porefno")){
                invoice.setPoRefNumber((String)dataMap.get("porefno"));
            }
            hibernateTemplate.save(invoice);
            list.add(invoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }


    public KwlReturnObject deleteBillingInvoice(String invoiceid, String companyid) throws ServiceException {
        //Delete Invoice
        String delQuery = "delete from BillingInvoice inv where ID=? and inv.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{invoiceid, companyid});

        return new KwlReturnObject(true, "Biling Invoice has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteBillingInvoiceEntry(String invoiceid, String companyid) throws ServiceException {
        //Delete Invoice
        String delQuery = "update BillingInvoice inv set inv.deleted=true where inv.ID = ? and inv.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{invoiceid, companyid});

        return new KwlReturnObject(true, "Biling Invoice has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteBillingInvoiceDtails(String invoiceid, String companyid) throws ServiceException {
        BillingInvoice binvoice = (BillingInvoice) hibernateTemplate.get(BillingInvoice.class, invoiceid);
        Iterator itr = binvoice.getRows().iterator();
        int numRows = 0;
        while (itr.hasNext()) {
            BillingInvoiceDetail row = (BillingInvoiceDetail) itr.next();
            String delQuery = "delete from BillingInvoiceDetail where ID=? and company.companyID=?";
            numRows += HibernateUtil.executeUpdate(hibernateTemplate, delQuery, new Object[]{row.getID(), companyid});
        }
        return new KwlReturnObject(true, "Billing Invoice details has been deleted successfully.", null, null, numRows);
    }
    public KwlReturnObject getInvoiceProductDetails(String productid, Date fromDate,Date toDate) throws ServiceException {
            ArrayList params=new ArrayList();
                String condition="";
                params.add( productid);
                if(fromDate!=null){
                params.add(fromDate);
                    condition+= "  and inv.invoice.journalEntry.entryDate>= ?";
                }
                if(toDate!=null){
                    params.add(toDate);
                    condition+= "  and inv.invoice.journalEntry.entryDate< ?";
                }
                String avgAmountQuery = "from InvoiceDetail inv where inventory.product.ID=? "+condition+" and inv.invoice.deleted=false" ;
                List list =  HibernateUtil.executeQuery(hibernateTemplate,avgAmountQuery,params.toArray());
                return new KwlReturnObject(true, "", null, list, list.size());        
        //         String selQuery = "from InvoiceDetail ge where ge.salesorderdetail.ID = ?";
//        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{invoiceid});
//         return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getIDFromSOD(String soid) throws ServiceException {
        String selQuery = "from InvoiceDetail ge where ge.salesorderdetail.ID = ?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBIDFromBSOD(String bsoid) throws ServiceException {
        String selQuery = "from BillingInvoiceDetail ge where ge.salesOrderDetail.ID = ?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{bsoid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getBIFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from BillingInvoice where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getInvoiceFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from Invoice where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getJEFromBI(String jeid, String companyid) throws ServiceException {
        String selQuery = "from BillingInvoice inv where inv.ID = ? and inv.company.companyID = ?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
//select invd.discount.ID from BillingInvoiceDetail invd where invd.billingInvoice.ID in( " + qMarks + ") and invd.company.companyID=di.company.companyID
    public KwlReturnObject getDisIdFromBIDet(String invid, String companyid) throws ServiceException {
        String selQuery = "from BillingInvoiceDetail invd where invd.billingInvoice.ID = ? and invd.company.companyID = ?";
        List list = HibernateUtil.executeQuery(hibernateTemplate, selQuery, new Object[]{invid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getRepeateInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        Date currentDate = new Date();
//        String companyid = (String)requestParams.get("companyid");
//        String query = "from Invoice where company.companyID = ? and repeateInvoice is not null and repeateInvoice.nextDate <= ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= ?)";
//        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{companyid, currentDate, currentDate});
        String query = "from Invoice where repeateInvoice is not null and startDate<=now() and repeateInvoice.nextDate <= ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= ?)";
        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{currentDate, currentDate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getRepeateBillingInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        Date currentDate = new Date();
//        String companyid = (String)requestParams.get("companyid");
//        String query = "from BillingInvoice where company.companyID = ? and repeateInvoice is not null and repeateInvoice.nextDate <= ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= ?)";
//        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{companyid, currentDate, currentDate});
        String query = "from BillingInvoice where repeateInvoice is not null and startDate<=now() and repeateInvoice.nextDate <= ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= ?)";
        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{currentDate, currentDate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getRepeateInvoicesDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String parentInvoiceId = (String) requestParams.get("parentInvoiceId");
        String query = "from Invoice where parentInvoice.ID = ? ";
        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{parentInvoiceId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getRepeateBillingInvoicesDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String parentInvoiceId = (String) requestParams.get("parentInvoiceId");
        String query = "from BillingInvoice where parentInvoice.ID = ? ";
        List list = HibernateUtil.executeQuery(hibernateTemplate, query, new Object[]{parentInvoiceId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject saveRepeateInvoiceInfo(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            RepeatedInvoices rinvoice = null;
            if (dataMap.containsKey("id")) {
                rinvoice = (RepeatedInvoices) hibernateTemplate.get(RepeatedInvoices.class, (String)dataMap.get("id"));
            } else {
                rinvoice = new RepeatedInvoices();
            }

            if (dataMap.containsKey("intervalType")) {
                rinvoice.setIntervalType((String) dataMap.get("intervalType"));
            }
            if (dataMap.containsKey("intervalUnit")) {
                rinvoice.setIntervalUnit((Integer) dataMap.get("intervalUnit"));
            }
            if (dataMap.containsKey("startDate")) {
                rinvoice.setStartDate((Date) dataMap.get("startDate"));
            }
            if (dataMap.containsKey("nextDate")) {
                rinvoice.setNextDate((Date) dataMap.get("nextDate"));
            }
            if (dataMap.containsKey("expireDate")) {
                rinvoice.setExpireDate((Date) dataMap.get("expireDate"));
            }
            
            hibernateTemplate.saveOrUpdate(rinvoice);
            list.add(rinvoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveRepeateInvoiceInfo : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoice_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from InvoiceDetail invd where inventory.product.ID=? and invd.company.companyID=? and invd.invoice.deleted=false";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

//select inv.journalEntry.ID from BillingInvoice inv where inv.ID in( " + qMarks + ") and inv.company.companyID=je.company.companyID
}
