/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

package com.krawler.spring.accounting.depreciation;

import com.krawler.hql.accounting.DepreciationDetail;
import com.krawler.hql.accounting.StaticValues;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONObject;
import java.net.URLDecoder;
import java.util.HashMap;
import org.hibernate.SessionFactory;
import org.springframework.test.AbstractTransactionalDataSourceSpringContextTests;

/**
 *
 * @author sagar
 */
public class accDepreciationImplTest extends AbstractTransactionalDataSourceSpringContextTests {
    private SessionFactory sessionFactory = null;
    //company id for demo
    private static String companyid = "a4792363-b0e1-4b67-992b-2851234d5ea6";
    private static String ddID = "";
    private static String accountID = "c340667e294f2b8501294f44a5350002";// Change this id from the DB
    private static String jeID = "c340667e294f2b8501294f4586ba0003";// Change this id from the DB
    public accDepreciationImplTest(String testName) {
        super(testName);
    }

    /*
     *** spring version 2.5.6 and above when extending from AbstractJUnit38SpringContextTests
     *
     *
    protected AbstractXmlApplicationContext createApplicationContext() {
    return new ClassPathXmlApplicationContext("test-applicationContext.xml");
    }*/
    protected String[] getConfigLocations() {
        return new String[]{"test-applicationContext.xml"};
    }

    /**
     * Spring will automatically inject the Hibernate session factory on startup
     * @param sessionFactory
     */
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    /**
     * Test of setSessionFactory method, of class accUomImpl.
     */
    public void testSetSessionFactory() {
        System.out.println("setSessionFactory");
        assertNotNull(sessionFactory);
    }

    /**
     * Test of addDepreciationDetail method, of class accDepreciationImpl.
     */
    public void testAddDepreciationDetail() throws Exception {
        System.out.println("addDepreciationDetail");
        JSONArray jArr = new JSONArray("[{accid:\"\",accname:\"\",groupid:\"\",groupname:\"\",level:\"\",leaf:\"\",openbalance:\"\",salvage:\"\",life:\"\",parentid:\"\",currencysymbol:\"Cent\",currencyname:\"US%20Dollars\",currencyid:\"1\",parentname:\"\",depreciationaccount:\"\",period:\"2\",frommonth:'Jul 19, 2010 12:00:00 AM',tomonth:'Aug 19, 2010 12:00:00 AM',firstperiodamt:\"5.416666666666667\",posted:false,perioddepreciation:\"5.416666666666667\",accdepreciation:\"10.833333333333334\",creationDate:'',netbookvalue:\"643.1666666666667\",depdetailid:\"\",deleted:\"\",isje:\"true\",categoryid:\"\",id:\"\",modified:true}]");
        if (jArr.length() > 0) {
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                double perioddepreciation = Double.parseDouble(URLDecoder.decode(jobj.getString("perioddepreciation"), StaticValues.ENCODING));
//                String nextJEAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_JOURNALENTRY);
//                String jeentryNumber = nextJEAutoNo;
//
//                HashMap<String,Object> jeDataMap = AccountingManager.getGlobalParams(request);
//                jeDataMap.put("entrynumber", jeentryNumber);
//                jeDataMap.put("autogenerated", nextJEAutoNo.equals(jeentryNumber));
//                jeDataMap.put("entrydate", Cal.getTime());
//                jeDataMap.put("companyid", companyid);
//                jeDataMap.put("memo", request.getParameter("memo"));
//                jeDataMap.put("currencyid", account.getCurrency().getCurrencyID());
//                HashSet jeDetails = new HashSet();
//                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
//                JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
//                String jeid = journalEntry.getID();
//                jeDataMap.put("jeid", jeid);
//                jeDataMap.put("jedetails", jeDetails);
//                jeDataMap.put("externalCurrencyRate", 0.0);
//                jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
//                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);

                HashMap<String, Object> ddMap = new HashMap();
                ddMap.put("accountid", accountID);
                ddMap.put("period", Integer.parseInt(URLDecoder.decode(jobj.getString("period"), StaticValues.ENCODING)));
                ddMap.put("companyid", companyid);
                ddMap.put("jeid", jeID);
//                    dd.setPeriodAmount(perioddepreciation);
//                    dd.setAccumulatedAmount(jobj.optDouble("accdepreciation", 0));
//                    dd.setNetBookValue(jobj.optDouble("netbookvalue", 0));
                ddMap.put("periodamount", perioddepreciation);
                ddMap.put("accamount", jobj.optDouble("accdepreciation", 0));
                ddMap.put("netbookvalue", jobj.optDouble("netbookvalue", 0));

                accDepreciationImpl instance = new accDepreciationImpl();
                instance.setSessionFactory(sessionFactory);
                KwlReturnObject result = instance.addDepreciationDetail(ddMap);
                //commit the transaction to verify result in database.
                //In this case don't commit the transaction as jeID is hardcoded. It should be next generated ID.
//                transactionManager.commit(transactionStatus);
                if(result.isSuccessFlag()) {
                    ddID = ((DepreciationDetail)result.getEntityList().get(0)).getID();
                }
                assertTrue("Success : ", result.isSuccessFlag());
                assertEquals("Object returned on add : ", 1, result.getEntityList().size());
            }
        }
        
    }

    /**
     * Test of updateDepreciationDetail method, of class accDepreciationImpl.
     */
    public void testUpdateDepreciationDetail() throws Exception {
        System.out.println("updateDepreciationDetail");
        String ddid = "c340667e294f2b8501294f4586c00006";
        JSONArray jArr = new JSONArray("[{accid:\"\",accname:\"\",groupid:\"\",groupname:\"\",level:\"\",leaf:\"\",openbalance:\"\",salvage:\"\",life:\"\",parentid:\"\",currencysymbol:\"Cent\",currencyname:\"US%20Dollars\",currencyid:\"1\",parentname:\"\",depreciationaccount:\"\",period:\"2\",frommonth:'Jul 19, 2010 12:00:00 AM',tomonth:'Aug 19, 2010 12:00:00 AM',firstperiodamt:\"5.416666666666667\",posted:false,perioddepreciation:\"5.416666666666667\",accdepreciation:\"10.833333333333334\",creationDate:'',netbookvalue:\"643.1666666666667\",depdetailid:\"\",deleted:\"\",isje:\"true\",categoryid:\"\",id:\"\",modified:true}]");
        if (jArr.length() > 0) {
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                double perioddepreciation = Double.parseDouble(URLDecoder.decode(jobj.getString("perioddepreciation"), StaticValues.ENCODING));

                HashMap<String, Object> ddMap = new HashMap();
                ddMap.put("id", ddid);
                ddMap.put("accountid", accountID);
                ddMap.put("period", Integer.parseInt(URLDecoder.decode(jobj.getString("period"), StaticValues.ENCODING)));
                ddMap.put("companyid", companyid);
                ddMap.put("jeid", jeID);
//                    dd.setPeriodAmount(perioddepreciation);
//                    dd.setAccumulatedAmount(jobj.optDouble("accdepreciation", 0));
//                    dd.setNetBookValue(jobj.optDouble("netbookvalue", 0));
                ddMap.put("periodamount", perioddepreciation);
                ddMap.put("accamount", jobj.optDouble("accdepreciation", 0));
                ddMap.put("netbookvalue", jobj.optDouble("netbookvalue", 0));

                accDepreciationImpl instance = new accDepreciationImpl();
                instance.setSessionFactory(sessionFactory);
                KwlReturnObject result = instance.updateDepreciationDetail(ddMap);
                //commit the transaction to verify result in database.
                //In this case don't commit the transaction as jeID is hardcoded. It should be next generated ID.
//                transactionManager.commit(transactionStatus);
                assertTrue("Success : ", result.isSuccessFlag());
                assertEquals("Object returned on add : ", 1, result.getEntityList().size());
            }
        }
    }

    /**
     * Test of getDepreciationFromJE method, of class accDepreciationImpl.
     */
    public void testGetDepreciationFromJE() throws Exception {
        System.out.println("getDepreciationFromJE");
        accDepreciationImpl instance = new accDepreciationImpl();
        instance.setSessionFactory(sessionFactory);
        KwlReturnObject result = instance.getDepreciationFromJE(jeID, companyid);
        //To Check success flag in KWLReturnObject
        assertTrue("Success Flag false : ", result.isSuccessFlag());
        //To Check if fetched list is not null
        assertNotNull("Result Entrylist is NULL : ", result.getEntityList());

        System.out.println("No. of records fetched : "+result.getRecordTotalCount());
    }

    /**
     * Test of getDepreciation method, of class accDepreciationImpl.
     */
    public void testGetDepreciation() throws Exception {
        System.out.println("getDepreciation");
        HashMap<String, Object> filterParams = new HashMap<String, Object>();
        filterParams.put("period", 1);
        filterParams.put("accountid", accountID);
        filterParams.put("companyid", companyid);
        accDepreciationImpl instance = new accDepreciationImpl();
        instance.setSessionFactory(sessionFactory);
        KwlReturnObject result = instance.getDepreciation(filterParams);
        //To Check success flag in KWLReturnObject
        assertTrue("Success Flag false : ", result.isSuccessFlag());
        //To Check if fetched list is not null
        assertNotNull("Result Entrylist is NULL : ", result.getEntityList());

        System.out.println("No. of records fetched : "+result.getRecordTotalCount());
    }

}
