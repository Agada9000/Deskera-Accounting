/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
package com.krawler.spring.accounting.salesorder;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.CostCenter;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.hql.accounting.BillingSalesOrderDetail;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.hibernate.impl.HibernateUtil;
import com.krawler.hql.accounting.Account;
import com.krawler.hql.accounting.BillingSalesOrder;
import com.krawler.hql.accounting.Customer;
import com.krawler.hql.accounting.Product;
import com.krawler.hql.accounting.Quotation;
import com.krawler.hql.accounting.QuotationDetail;
import com.krawler.hql.accounting.SalesOrder;
import com.krawler.hql.accounting.SalesOrderDetail;
import com.krawler.hql.accounting.Tax;
import com.krawler.spring.accounting.costCenter.CCConstants;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.hibernate.SessionFactory;
import org.springframework.orm.hibernate3.HibernateTemplate;

/**
 *
 * @author krawler
 */
public class accSalesOrderImpl implements accSalesOrderDAO {
    private HibernateTemplate hibernateTemplate;
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.hibernateTemplate = new HibernateTemplate(sessionFactory);
	}

    public KwlReturnObject getSalesOrderCount(String orderno, String companyid) throws ServiceException{
        List list = new ArrayList();
        int count = 0;
        String q = "from SalesOrder where salesOrderNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{orderno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject saveSalesOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String soid = (String) dataMap.get("id");

            SalesOrder salesOrder = new SalesOrder();
            if(StringUtil.isNullOrEmpty(soid)) {
                salesOrder.setDeleted(false);
            } else {
                salesOrder = (SalesOrder) hibernateTemplate.get(SalesOrder.class, soid);
            }

            if (dataMap.containsKey("entrynumber")) {
                salesOrder.setSalesOrderNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                salesOrder.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("memo")) {
                salesOrder.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("customerid")) {
                Customer customer = dataMap.get("customerid")==null?null:(Customer) hibernateTemplate.get(Customer.class, (String) dataMap.get("customerid"));
                salesOrder.setCustomer(customer);
            }
            if (dataMap.containsKey("orderdate")) {
                salesOrder.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                salesOrder.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("taxid"));
                salesOrder.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId")==null?null:(CostCenter)hibernateTemplate.get(CostCenter.class, (String) dataMap.get("costCenterId"));
                salesOrder.setCostcenter(costCenter);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                salesOrder.setCompany(company);
            }
            if (dataMap.containsKey("sodetails")) {
                if(dataMap.get("sodetails") != null) {
                    salesOrder.setRows((Set<SalesOrderDetail>) dataMap.get("sodetails"));
                }
            }
            hibernateTemplate.saveOrUpdate(salesOrder);
            list.add(salesOrder);
        } catch(Exception ex){
            throw ServiceException.FAILURE("saveSalesOrder : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject saveSalesOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            SalesOrderDetail salesOrderDetail = new SalesOrderDetail();
            if(!StringUtil.isNullOrEmpty(sodid)) {
                salesOrderDetail = (SalesOrderDetail) hibernateTemplate.get(SalesOrderDetail.class, sodid);
            }

            if (dataMap.containsKey("soid")) {
               SalesOrder salesOrder = dataMap.get("soid")==null?null:(SalesOrder) hibernateTemplate.get(SalesOrder.class, (String) dataMap.get("soid"));
               salesOrderDetail.setSalesOrder(salesOrder);
            }
            if (dataMap.containsKey("srno")) {
                salesOrderDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate")) {
                salesOrderDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
                salesOrderDetail.setQuantity((Integer) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("remark")) {
                salesOrderDetail.setRemark((String) dataMap.get("remark"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid")==null?null:(Product) hibernateTemplate.get(Product.class, (String) dataMap.get("productid"));
                salesOrderDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                salesOrderDetail.setCompany(company);
            }
            if(dataMap.containsKey("rowtaxid")){
                Tax rowtax = (dataMap.get("rowtaxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("rowtaxid")));
                salesOrderDetail.setTax(rowtax);
            }
            hibernateTemplate.saveOrUpdate(salesOrderDetail);
            list.add(salesOrderDetail);
        } catch(Exception ex){
            throw ServiceException.FAILURE("saveSalesOrderDetails : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getSalesOrders(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try{
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where deleted=false and company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and ( salesOrderNumber like ? or so.memo like ? or so.customer.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and so.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (so.orderDate >=? and so.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "from SalesOrder so" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex){
            throw ServiceException.FAILURE("accCustomerDAOImpl.getSalesOrders:"+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject deleteSalesOrder(String soid, String companyid) throws ServiceException {
        String query = "update SalesOrder set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{soid, companyid});
        return new KwlReturnObject(true, "Sales Order has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getSO_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from SalesOrderDetail sod where product.ID=? and sod.company.companyID=? and sod.salesOrder.deleted=false"; 
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getSalesOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from SalesOrderDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    // Billing Sales Order
    public KwlReturnObject getBillingSalesOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from BillingSalesOrderDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }

    public KwlReturnObject getBillingSalesOrderCount(String orderno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from BillingSalesOrder where salesOrderNumber=? and company.companyID=?";
        list = HibernateUtil.executeQuery(hibernateTemplate, q, new Object[]{orderno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject saveBillingSalesOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String bsoid = (String) dataMap.get("id");

            BillingSalesOrder salesOrder = new BillingSalesOrder();
            if(StringUtil.isNullOrEmpty(bsoid)) {
                salesOrder.setDeleted(false);
            } else {
                salesOrder = (BillingSalesOrder) hibernateTemplate.get(BillingSalesOrder.class, bsoid);
            }

            if (dataMap.containsKey("entrynumber")) {
                salesOrder.setSalesOrderNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                salesOrder.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("memo")) {
                salesOrder.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("customerid")) {
                Customer customer = dataMap.get("customerid")==null?null:(Customer) hibernateTemplate.get(Customer.class, (String) dataMap.get("customerid"));
                salesOrder.setCustomer(customer);
            }
            if (dataMap.containsKey("orderdate")) {
                salesOrder.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
                salesOrder.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("credito")) {
                Account account = dataMap.get("credito")==null?null:(Account) hibernateTemplate.get(Account.class, (String) dataMap.get("credito"));
                salesOrder.setCreditTo(account);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("taxid"));
                salesOrder.setTax(tax);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId")==null?null:(CostCenter)hibernateTemplate.get(CostCenter.class, (String) dataMap.get("costCenterId"));
                salesOrder.setCostcenter(costCenter);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                salesOrder.setCompany(company);
            }
            if (dataMap.containsKey("sodetails")) {
                if(dataMap.get("sodetails") != null) {
                    salesOrder.setRows((Set<BillingSalesOrderDetail>) dataMap.get("sodetails"));
                }
            }
            hibernateTemplate.saveOrUpdate(salesOrder);
            list.add(salesOrder);
        } catch(Exception ex){
            throw ServiceException.FAILURE("saveBillingSalesOrder : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject saveBillingSalesOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String bsodid = (String) dataMap.get("id");

            BillingSalesOrderDetail salesOrderDetail = new BillingSalesOrderDetail();
            if(!StringUtil.isNullOrEmpty(bsodid)) {
                salesOrderDetail = (BillingSalesOrderDetail) hibernateTemplate.get(BillingSalesOrderDetail.class, bsodid);
            }

            if (dataMap.containsKey("soid")) {
               BillingSalesOrder salesOrder = dataMap.get("soid")==null?null:(BillingSalesOrder) hibernateTemplate.get(BillingSalesOrder.class, (String) dataMap.get("soid"));
               salesOrderDetail.setSalesOrder(salesOrder);
            }
            if (dataMap.containsKey("rate")) {
                salesOrderDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("srno")) {
                salesOrderDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("quantity")) {
                salesOrderDetail.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("remark")) {
                salesOrderDetail.setRemark((String) dataMap.get("remark"));
            }
            if (dataMap.containsKey("productdetail")) {
                salesOrderDetail.setProductDetail((String) dataMap.get("productdetail"));
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                salesOrderDetail.setCompany(company);
            }
            if(dataMap.containsKey("rowtaxid")){
                Tax rowtax = (dataMap.get("rowtaxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("rowtaxid")));
                salesOrderDetail.setTax(rowtax);
            }
            hibernateTemplate.saveOrUpdate(salesOrderDetail);
            list.add(salesOrderDetail);
        } catch(Exception ex){
            throw ServiceException.FAILURE("saveBillingSalesOrderDetails : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getBillingSalesOrders(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try{
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where deleted=false and company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and ( salesOrderNumber like ? or so.memo like ? or so.customer.name like ? )";
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and so.costcenter.ID=?";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (so.orderDate >=? and so.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "from BillingSalesOrder so" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex){
            throw ServiceException.FAILURE("accCustomerDAOImpl.getBillingSalesOrders: "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject deleteBillingSalesOrder(String soid, String companyid) throws ServiceException {
        String query = "update BillingSalesOrder set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{soid, companyid});
        return new KwlReturnObject(true, "Billing Sales Order has been deleted successfully.", null, null, numRows);
    }

	@Override
	public KwlReturnObject deleteSalesOrderDetails(String soid, String companyid) throws ServiceException {
	try{	
		String delQuery = "delete from SalesOrderDetail sod where sod.salesOrder.ID=? and sod.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{soid, companyid});
        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
	   }
    catch(Exception ex){
        throw ServiceException.FAILURE("Cannot Edit Sales Order as it is used in Customer Invoice already.",ex);//+ex.getMessage(), ex);
     }    
	}

	@Override
	public KwlReturnObject deleteBillingSalesOrderDetails(String soid,String companyid) throws ServiceException {
	try{	
		String delQuery = "delete from BillingSalesOrderDetail bsd where bsd.salesOrder.ID=? and bsd.company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, delQuery,new Object[]{soid, companyid});
        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
	  }
    catch(Exception ex){
        throw ServiceException.FAILURE("Cannot Edit Sales Order as it is used in Customer Invoice already.",ex);//+ex.getMessage(), ex);
     } 
	}
	
    public KwlReturnObject saveQuotation(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String soid = (String) dataMap.get("id");

            Quotation quotation = new Quotation();
            if(StringUtil.isNullOrEmpty(soid)) {
            	quotation.setDeleted(false);
            } else {
            	quotation = (Quotation) hibernateTemplate.get(Quotation.class, soid);
            }

            if (dataMap.containsKey("entrynumber")) {
            	quotation.setquotationNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
            	quotation.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("perDiscount")) {
            	quotation.setPerDiscount((Boolean) dataMap.get("perDiscount"));
            }
            if (dataMap.containsKey("discount")) {
            	quotation.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("memo")) {
            	quotation.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("customerid")) {
                Customer customer = dataMap.get("customerid")==null?null:(Customer) hibernateTemplate.get(Customer.class, (String) dataMap.get("customerid"));
                quotation.setCustomer(customer);
            }
            if (dataMap.containsKey("orderdate")) {
            	quotation.setQuotationDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("duedate")) {
            	quotation.setDueDate((Date) dataMap.get("duedate"));
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("taxid"));
                quotation.setTax(tax);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                quotation.setCompany(company);
            }
            if (dataMap.containsKey("sodetails")) {
                if(dataMap.get("sodetails") != null) {
                	quotation.setRows((Set<QuotationDetail>) dataMap.get("sodetails"));
                }
            }
            hibernateTemplate.saveOrUpdate(quotation);
            list.add(quotation);
        } catch(Exception ex){
            throw ServiceException.FAILURE("saveQuotation : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject saveQuotationDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String sodid = (String) dataMap.get("id");

            QuotationDetail quotationDetail = new QuotationDetail();
            if(!StringUtil.isNullOrEmpty(sodid)) {
            	quotationDetail = (QuotationDetail) hibernateTemplate.get(QuotationDetail.class, sodid);
            }

            if (dataMap.containsKey("soid")) {
            	Quotation quotation = dataMap.get("soid")==null?null:(Quotation) hibernateTemplate.get(Quotation.class, (String) dataMap.get("soid"));
            	quotationDetail.setQuotation(quotation);
            }
            if (dataMap.containsKey("srno")) {
            	quotationDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("rate")) {
            	quotationDetail.setRate((Double) dataMap.get("rate"));
            }
            if (dataMap.containsKey("quantity")) {
            	quotationDetail.setQuantity((Integer) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("remark")) {
            	quotationDetail.setRemark((String) dataMap.get("remark"));
            }
            if (dataMap.containsKey("discount")) {
            	quotationDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid")==null?null:(Product) hibernateTemplate.get(Product.class, (String) dataMap.get("productid"));
                quotationDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid")==null?null:(Company) hibernateTemplate.get(Company.class, (String) dataMap.get("companyid"));
                quotationDetail.setCompany(company);
            }
            if(dataMap.containsKey("rowtaxid")){
                Tax rowtax = (dataMap.get("rowtaxid")==null?null:(Tax) hibernateTemplate.get(Tax.class, (String) dataMap.get("rowtaxid")));
                quotationDetail.setTax(rowtax);
            }
            hibernateTemplate.saveOrUpdate(quotationDetail);
            list.add(quotationDetail);
        } catch(Exception ex){
            throw ServiceException.FAILURE("saveQuotationDetail : "+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject getQuotations(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try{
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            ArrayList params = new ArrayList();
            params.add((String) request.get(Constants.companyKey));
            String condition = " where q.deleted=false and q.company.companyID=?";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                condition += " and ( QuotationNumber like ? or q.memo like ? or q.customer.name like ? )";
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (q.orderDate >=? and q.orderDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String query = "from Quotation q" + condition;
            list = HibernateUtil.executeQuery(hibernateTemplate, query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = HibernateUtil.executeQueryPaging(hibernateTemplate, query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex){
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:"+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getQuotationDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from QuotationDetail";
        return StringUtil.buildNExecuteQuery(hibernateTemplate, query, requestParams);
    }
    
    public KwlReturnObject deleteQuotation(String qid, String companyid) throws ServiceException {
        String query = "update Quotation set deleted=true where ID=? and company.companyID=?";
        int numRows = HibernateUtil.executeUpdate(hibernateTemplate, query, new Object[]{qid, companyid});
        return new KwlReturnObject(true, "Quotation has been deleted successfully.", null, null, numRows);
    }

}
